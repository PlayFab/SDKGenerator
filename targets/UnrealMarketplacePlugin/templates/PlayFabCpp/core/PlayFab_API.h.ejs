<%- copyright %>

// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#pragma once

#include "CoreMinimal.h"
#include "Core/PlayFabError.h"
#include "Core/PlayFab<%- api.name %>DataModels.h"
#include "Core/PlayFabSettings.h"
#include "Interfaces/IHttpRequest.h"
#include "Interfaces/IHttpResponse.h"

namespace PlayFab
{
    class FPlayFab<%- api.name %>APIDelegates
    {
public:
<% for(var i in api.calls) { var apiCall = api.calls[i]; %>        DECLARE_DELEGATE_OneParam(F<%- apiCall.name %>Delegate, const <%- api.name %>Models::F<%- apiCall.result%>&);
<% } %>
    };


    class PLAYFABCPP_API UPlayFab<%- api.name %>API : UObject
    {
    public:
        UPlayFab<%- api.name %>API();
        ~UPlayFab<%- api.name %>API();

        int GetPendingCalls() const;
        FString GetBuildIdentifier() const;
        void SetTitleId(const FString& titleId);
<% if (hasClientOptions) {
%>        bool SetAdvertId(const FString& typeId, const FString& advertisingIdValue);
        bool AdvertIdSuccessful();
        bool IsClientLoggedIn() const;
        void MultiStepClientLogin(bool needsAttribution);
<% } %>        void SetDevSecretKey(const FString& developerSecretKey);

        // ------------ Generated API calls
<% for(var i in api.calls) { var apiCall = api.calls[i];
if (hasRequest(apiCall, api)) {
%><%- generateApiSummary("        ", apiCall, "summary")
%>        bool <%- apiCall.name %>(<%- api.name %>Models::F<%- apiCall.request %>& request, const FPlayFab<%- api.name %>APIDelegates::F<%- apiCall.name %>Delegate& SuccessDelegate = FPlayFab<%- api.name %>APIDelegates::F<%- apiCall.name %>Delegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
<%    } else  {%><%- generateApiSummary("        ", apiCall, "summary") %>
        bool <%- apiCall.name %>(const FPlayFab<%- api.name %>APIDelegates::F<%- apiCall.name %>Delegate& SuccessDelegate = FPlayFab<%- api.name %>APIDelegates::F<%- apiCall.name %>Delegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
<%- generateApiSummary("        ", apiCall, "summary")
%>        bool <%- apiCall.name %>(<%- api.name %>Models::F<%- apiCall.request %>& request, const FPlayFab<%- api.name %>APIDelegates::F<%- apiCall.name %>Delegate& SuccessDelegate = FPlayFab<%- api.name %>APIDelegates::F<%- apiCall.name %>Delegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
<% } 
} %>
    };

    class FPlayFab<%- api.name %>APICallbacks
    {
        friend class UPlayFab<%- api.name %>API;
    private:
        // ------------ Generated result handlers
<% for(var i in api.calls) { var apiCall = api.calls[i];
%>        void On<%- apiCall.name %>Result(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FPlayFab<%- api.name %>APIDelegates::F<%- apiCall.name %>Delegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
<% } %>
 <% if (hasClientOptions) {
%>        bool SetAdvertId(const FString& typeId, const FString& advertisingIdValue);
        bool AdvertIdSuccessful();
        bool IsClientLoggedIn() const;
        void MultiStepClientLogin(bool needsAttribution);
<% } %>
   };
}
