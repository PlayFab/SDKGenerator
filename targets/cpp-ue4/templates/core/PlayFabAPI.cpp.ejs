// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#include "PlayFabPrivatePCH.h"
#include "Core/PlayFab<%- api.name %>API.h"
#include "Core/PlayFabSettings.h"
#include "Core/PlayFabResultHandler.h"
#include "Core/PlayFabVersion.h"

using namespace PlayFab;
using namespace PlayFab::<%- api.name %>Models;

UPlayFab<%- api.name %>API::UPlayFab<%- api.name %>API()
{
   
}

UPlayFab<%- api.name %>API::~UPlayFab<%- api.name %>API()
{
}

<% if(api.name == "Client") { %>bool UPlayFabClientAPI::IsClientLoggedIn()
{
	return !mUserSessionTicket.IsEmpty();
}<% } %>

<% 
	for(var i in api.calls)
	{
		var apiCall = api.calls[i]; 
%>
bool UPlayFab<%- api.name %>API::<%- apiCall.name %>(
    <% if(hasRequest(apiCall, api)) { %><%- api.name %>Models::F<%- apiCall.request %>& request,<% } %>
    const F<%- apiCall.name %>Delegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    <%- getRequestActions(apiCall, api) %>
	TSharedRef<IHttpRequest> HttpRequest = FHttpModule::Get().CreateRequest();
	HttpRequest->SetVerb(TEXT("POST"));
	HttpRequest->SetURL(<%- getUrlAccessor(apiCall) %>);
	HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
	HttpRequest->SetHeader(TEXT("X-PlayFabSDK"), PlayFabVersionString);
	<%- getAuthParams(apiCall) %>
    <% if(hasRequest(apiCall, api)) { %>HttpRequest->SetContentAsString(request.toJSONString());<% } else { %>HttpRequest->SetContentAsString(TEXT("{}"));<% } %>
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFab<%- api.name %>API::On<%- apiCall.name %>Result, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFab<%- api.name %>API::On<%- apiCall.name %>Result(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, F<%- apiCall.name %>Delegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    <%- api.name %>Models::F<%- apiCall.result%> outResult;
    FPlayFabError errorResult;
	if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
	{
		<%- getResultActions(apiCall, api) %>
		SuccessDelegate.ExecuteIfBound(outResult);
	}
	else
	{
		ErrorDelegate.ExecuteIfBound(errorResult);
	}
}

<% } %>


