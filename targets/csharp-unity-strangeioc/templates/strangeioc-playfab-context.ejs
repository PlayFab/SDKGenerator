using UnityEngine;
using System.Collections;
using strange.extensions.command.api;
using strange.extensions.command.impl;
using strange.extensions.context.impl;

public class PlayFabContext : MVCSContext
{
    public PlayFabContextMediator playFabContext;

    public PlayFabContext(MonoBehaviour ctxView, bool autoMap) : base(ctxView, autoMap)
    {
        playFabContext = (PlayFabContextMediator)ctxView;
    }

    protected override void addCoreComponents()
    {
        base.addCoreComponents();
        injectionBinder.Unbind<ICommandBinder>();
        injectionBinder.Bind<ICommandBinder>().To<SignalCommandBinder>().ToSingleton();
    }

    protected override void mapBindings()
    {

        //Bind Signals Cross Context
        injectionBinder.Bind<LoadPlayFabDataSignal>().CrossContext();
        injectionBinder.Bind<GetLinkTypeSignal>().CrossContext();
        injectionBinder.Bind<GetPlatFormSignal>().CrossContext();
        injectionBinder.Bind<LoginToPlayFabSignal>().CrossContext();
        //Bind Response Signals Cross Context
        injectionBinder.Bind<LoginToPlayFabResponseSignal>().CrossContext();<% for(var i=0; i< api.subgroups.length; i++){ %><% var subgroup = api.subgroups[i]; %>
        //<%-subgroup.name%>
        #region <%-subgroup.name%><% for(var x=0; x<subgroup.methods.length; x++){ %><% var apiCall = api.calls.filter(function(el){ return el.name === subgroup.methods[x]; })[0];%><% if( !apiCall ) { %><% continue; %><% } %>
        injectionBinder.Bind<<%-apiCall.name%>Signal>().CrossContext();
        injectionBinder.Bind<<%-apiCall.name%>ResponseSignal>().CrossContext();<%}%>
        #endregion<%}%>
    }
}