using PlayFab.<%- api.name %>Models;
using PlayFab.Internal;
using PlayFab.Json;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace PlayFab
{
<%- generateApiSummary("    ", api, "description")
%>    public class PlayFab<%- api.name %>InstanceAPI
    {
	    private PlayFabApiSettings apiSettings = null;
        private PlayFabAuthenticationContext authenticationContext = null;
		
		public PlayFab<%- api.name %>InstanceAPI()
        {

        }

        public PlayFab<%- api.name %>InstanceAPI(PlayFabApiSettings settings = null)
        {
            apiSettings = settings;
        }

        public PlayFab<%- api.name %>InstanceAPI(PlayFabAuthenticationContext context = null)
        {
            authenticationContext = context;
        }
		
		public PlayFab<%- api.name %>InstanceAPI(PlayFabApiSettings settings = null, PlayFabAuthenticationContext context = null)
        {
            apiSettings = settings;
            authenticationContext = context;
        }
		
		public void SetSettings(PlayFabApiSettings settings)
        {
            apiSettings = settings;
        }

        public PlayFabApiSettings GetSettings()
        {
            return apiSettings;
        }

        public void SetAuthenticationContext(PlayFabAuthenticationContext context)
        {
            authenticationContext = context;
        }

        public PlayFabAuthenticationContext GetAuthenticationContext()
        {
            return authenticationContext;
        }
		
<% for(var i in api.calls) { var apiCall = api.calls[i];
%><%- generateApiSummary("        ", apiCall, "summary")
%><%- getDeprecationAttribute("        ", apiCall)
%>        public async Task<PlayFabResult<<%- apiCall.result %>>> <%- apiCall.name %>Async(<%- apiCall.request %> request, object customData = null, Dictionary<string, string> extraHeaders = null)
        {
<%- getRequestActions("            ", apiCall, true) %>
            var httpResult = await PlayFabHttp.DoPost("<%- apiCall.url %>", request, <%- getAuthParams(apiCall, true) %>, extraHeaders, apiSettings);
            if (httpResult is PlayFabError)
            {
                var error = (PlayFabError)httpResult;
                PlayFabSettings.GlobalErrorHandler?.Invoke(error);
                return new PlayFabResult<<%- apiCall.result %>> { Error = error, CustomData = customData };
            }

            var resultRawJson = (string)httpResult;
            var resultData = PluginManager.GetPlugin<ISerializerPlugin>(PluginContract.PlayFab_Serializer).DeserializeObject<PlayFabJsonSuccess<<%- apiCall.result %>>>(resultRawJson);
            var result = resultData.data;
<%- getResultActions("            ", apiCall, api) %>
            return new PlayFabResult<<%- apiCall.result %>> { Result = result, CustomData = customData };
        }

<% } %><% if (hasClientOptions) {
%>        // Determine if the client session ticket is set, without actually making it public
        public bool IsClientLoggedIn()
        {
            return !string.IsNullOrEmpty(PlayFabSettings.ClientSessionTicket);
        }

        private async Task<PlayFabResult<AttributeInstallResult>> MultiStepClientLogin(bool needsAttribution)
        {
            if (needsAttribution && !PlayFabSettings.DisableAdvertising && !string.IsNullOrEmpty(PlayFabSettings.AdvertisingIdType) && !string.IsNullOrEmpty(PlayFabSettings.AdvertisingIdValue))
            {
                var request = new AttributeInstallRequest();
                if (PlayFabSettings.AdvertisingIdType == PlayFabSettings.AD_TYPE_IDFA)
                    request.Idfa = PlayFabSettings.AdvertisingIdValue;
                else if (PlayFabSettings.AdvertisingIdType == PlayFabSettings.AD_TYPE_ANDROID_ID)
                    request.Adid = PlayFabSettings.AdvertisingIdValue;
                else
                    return null;
                return await AttributeInstallAsync(request);
            }
            return null;
        }
<% } %>    }
}
