using System;
using PlayFab.<%- api.name %>Models;
using PlayFab.Internal;
using UnityEngine;

namespace PlayFab
{
<% if (api.description) { %>    /// <summary>
    /// <%- api.description %>
    /// </summary>
<% } %>    public static class PlayFab<%- api.name %>API
    {
        public delegate void ProcessApiCallback<in TResult>(TResult result) where TResult : PlayFabResultCommon;

<% for(var i in api.calls) { var apiCall = api.calls[i]; %>        public delegate void <%- apiCall.name %>RequestCallback(string urlPath, int callId, <%- apiCall.request %> request, object customData);
        public delegate void <%- apiCall.name %>ResponseCallback(string urlPath, int callId, <%- apiCall.request %> request, <%- apiCall.result %> result, PlayFabError error, object customData);
<% } %>
<% for(var i in api.calls) { var apiCall = api.calls[i]; if (apiCall.summary) { %>        /// <summary>
        /// <%- apiCall.summary %>
        /// </summary>
<% } %>        public static void <%- apiCall.name %>(<%- apiCall.request %> request, ProcessApiCallback<<%- apiCall.result %>> resultCallback, ErrorCallback errorCallback, object customData = null)
        {
            <%- getRequestActions(apiCall, api) %>
            string serializedJson = SimpleJson.SerializeObject(request, Util.ApiSerializerStrategy);
            Action<CallRequestContainer> callback = delegate(CallRequestContainer requestContainer)
            {
<% if (hasResultActions(apiCall, api)) {
%>                ResultContainer<<%- apiCall.result %>>.HandleResults(requestContainer, resultCallback, errorCallback, <%- apiCall.name %>ResultAction);
<% } else {
%>                ResultContainer<<%- apiCall.result %>>.HandleResults(requestContainer, resultCallback, errorCallback, null);
<% } %>            };
            PlayFabHTTP.Post("<%- apiCall.url %>", serializedJson, <%- getAuthParams(apiCall) %>, callback, request, customData);
        }
<% if (hasResultActions(apiCall, api)) { %>        public static void <%- apiCall.name %>ResultAction(<%- apiCall.result %> result, CallRequestContainer requestContainer)
        {
<%- getResultActions(apiCall, api) %>
        }
<% } %>
<% } %><% if (hasClientOptions) { %>        private static string _authKey = null;
        // Determine if the _authKey is set, without actually making it public
        public static bool IsClientLoggedIn()
        {
            return !string.IsNullOrEmpty(_authKey);
        }

        private static void MultiStepClientLogin(bool needsAttribution)
        {
            // Automatically try to fetch the ID
            if (needsAttribution && !PlayFab.PlayFabSettings.DisableAdvertising && string.IsNullOrEmpty(PlayFab.PlayFabSettings.AdvertisingIdType) && string.IsNullOrEmpty(PlayFab.PlayFabSettings.AdvertisingIdValue))
                GetAdvertisingId(out PlayFab.PlayFabSettings.AdvertisingIdType, out PlayFab.PlayFabSettings.AdvertisingIdValue, ref PlayFab.PlayFabSettings.DisableAdvertising);

            // Send the ID when appropriate
            if (needsAttribution && !PlayFab.PlayFabSettings.DisableAdvertising && !string.IsNullOrEmpty(PlayFab.PlayFabSettings.AdvertisingIdType) && !string.IsNullOrEmpty(PlayFab.PlayFabSettings.AdvertisingIdValue))
            {
                AttributeInstallRequest request = new AttributeInstallRequest();
                if (PlayFab.PlayFabSettings.AdvertisingIdType == PlayFab.PlayFabSettings.AD_TYPE_IDFA)
                    request.Idfa = PlayFab.PlayFabSettings.AdvertisingIdValue;
                else if (PlayFab.PlayFabSettings.AdvertisingIdType == PlayFab.PlayFabSettings.AD_TYPE_ANDROID_ID)
                    request.Android_Id = PlayFab.PlayFabSettings.AdvertisingIdValue;
                else
                    return;
                AttributeInstall(request, null, null);
            }
        }

        public static void GetAdvertisingId(out string advertisingIdType, out string advertisingIdValue, ref bool disableAdvertising)
        {
            advertisingIdType = "undefined";
            advertisingIdValue = "";

            try
            {
#if UNITY_ANDROID && !UNITY_EDITOR
                AndroidJavaClass advertIdGetter = new AndroidJavaClass("com.playfab.unityplugin.PlayFabGetAdvertId");

                AndroidJavaClass jc = new AndroidJavaClass("com.unity3d.player.UnityPlayer"); 
                AndroidJavaObject context = jc.GetStatic<AndroidJavaObject>("currentActivity");

                AndroidJavaObject adInfo = null;
                adInfo = advertIdGetter.CallStatic<AndroidJavaObject>("getAdvertisingIdInfo", context);

                if (adInfo != null)
                {
                    advertisingIdType = PlayFab.PlayFabSettings.AD_TYPE_ANDROID_ID;
                    advertisingIdValue = adInfo.Get<string>("advertisingId");
                    disableAdvertising = adInfo.Get<bool>("limitAdTrackingEnabled");
                }
#elif UNITY_IOS && !UNITY_EDITOR
                    advertisingIdType = PlayFab.PlayFabSettings.AD_TYPE_IDFA;
                    advertisingIdValue = PlayFabiOSPlugin.getIdfa();
                    disableAdvertising = PlayFabiOSPlugin.getAdvertisingDisabled();
#endif
            }
            catch (Exception e)
            {
                advertisingIdType = "error";
                advertisingIdValue = "";
                disableAdvertising = true;
                Debug.LogException(e);
            }
        }<% } %>
    }
}
