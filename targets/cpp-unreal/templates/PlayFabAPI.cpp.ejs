//////////////////////////////////////////////////////////////////////////////////////////////
// Automatically generated cpp file for the UE4 PlayFab plugin.
//
// API: <%- api.name %>
// SDK Version: <%- sdkVersion %>
//////////////////////////////////////////////////////////////////////////////////////////////

#include "PlayFabPrivatePCH.h"
#include "PlayFab<%- api.name %>API.h"

UPlayFab<%- api.name %>API* <%- api.name %>_proxy = NULL;

UPlayFab<%- api.name %>API::UPlayFab<%- api.name %>API(const FObjectInitializer& ObjectInitializer)
    : Super(ObjectInitializer)
{
    <%- api.name %>_proxy = this;
}

void UPlayFab<%- api.name %>API::SetRequestObject(UPlayFabJsonObject* JsonObject)
{
    RequestJsonObj = JsonObject;
}

UPlayFabJsonObject* UPlayFab<%- api.name %>API::GetResponseObject()
{
    return ResponseJsonObj;
}

FString UPlayFab<%- api.name %>API::PercentEncode(const FString& Text)
{
    FString OutText = Text;

    OutText = OutText.Replace(TEXT("!"), TEXT("%21"));
    OutText = OutText.Replace(TEXT("\""), TEXT("%22"));
    OutText = OutText.Replace(TEXT("#"), TEXT("%23"));
    OutText = OutText.Replace(TEXT("$"), TEXT("%24"));
    //OutText = OutText.Replace(TEXT("&"), TEXT("%26"));
    OutText = OutText.Replace(TEXT("'"), TEXT("%27"));
    OutText = OutText.Replace(TEXT("("), TEXT("%28"));
    OutText = OutText.Replace(TEXT(")"), TEXT("%29"));
    OutText = OutText.Replace(TEXT("*"), TEXT("%2A"));
    OutText = OutText.Replace(TEXT("+"), TEXT("%2B"));
    OutText = OutText.Replace(TEXT(","), TEXT("%2C"));
    //OutText = OutText.Replace(TEXT("/"), TEXT("%2F"));
    OutText = OutText.Replace(TEXT(":"), TEXT("%3A"));
    OutText = OutText.Replace(TEXT(";"), TEXT("%3B"));
    OutText = OutText.Replace(TEXT("="), TEXT("%3D"));
    //OutText = OutText.Replace(TEXT("?"), TEXT("%3F"));
    OutText = OutText.Replace(TEXT("@"), TEXT("%40"));
    OutText = OutText.Replace(TEXT("["), TEXT("%5B"));
    OutText = OutText.Replace(TEXT("]"), TEXT("%5D"));
    OutText = OutText.Replace(TEXT("{"), TEXT("%7B"));
    OutText = OutText.Replace(TEXT("}"), TEXT("%7D"));

    return OutText;
}

//////////////////////////////////////////////////////////////////////////
// Generated PlayFab <%- api.name %> API Functions
//////////////////////////////////////////////////////////////////////////

<%

// This loop goes through the subgroups of the api and orders the functions in groups.
// It makes it a little easier to navigate.

// Array to hold already printed models. That way we dont duplicate
var modelsArray = [];
for(var subgroup in api.subgroups)
{
%>
///////////////////////////////////////////////////////
// <%- api.subgroups[subgroup].name %>
//////////////////////////////////////////////////////
<%

    // This loop goes through all the api calls.
    // It checks to see if the subgroup is the correct subgroup we are currently on.
    // If so it creates the function definition with the summary text.
    // This allows us to see the summary in UE4 when we hover over a node.

    for(var i in api.calls)
    {
        var apiCall = api.calls[i];
        if(apiCall.subgroup == api.subgroups[subgroup].name)
        {

              %>/** <%- apiCall.summary %> */
<%            %>UPlayFab<%- api.name %>API* UPlayFab<%- api.name %>API::<%- apiCall.name %>(F<%- api.name %><%- apiCall.request %> request)
<%            %>{
<%            %>    // Objects containing request data
<%            %>    UPlayFab<%- api.name %>API* manager = NewObject<UPlayFab<%- api.name %>API>();
<%            %>    UPlayFabJsonObject* OutRestJsonObj = NewObject<UPlayFabJsonObject>();

<%            %>    // Setup the request
<%            %>    manager->PlayFabRequestURL = "<%- apiCall.url %>";
<%

                // If the api requires a sessionticket we add it, if not then leave it blank

                if(apiCall.auth == "SessionTicket")
                {
                %>    manager->useSessionTicket = true;
<%
                }
                else
                {
                %>    manager->useSessionTicket = false;
<%
                }

                // If the api requires the secret key we say true so it pulls from the PlayFab Module
                // However if this is the client SDK we don't include the secret key.

                if(libname != "Client")
                {
                    if(apiCall.auth == "SecretKey")
                    {
                    %>    manager->useSecretKey = true;
<%
                    }
                    else
                    {
                    %>    manager->useSecretKey = false;
<%
                    }
                }

                // If this deals with cloud script set the cloudscript bool
                if(apiCall.name == "RunCloudScript")
                {
                %>    manager->cloudScript = true;
<%
                }

                // If call is a login call set loginRequest true
                if (apiCall.result == "LoginResult")
                {
                %>    manager->isLoginRequest = true;
<%
                }
            %>

<%        %>    // Setup request object
<%

            // Now this is where the magic really happens.
            // Certain api calls require certain things, so we loop through each call to determine what it wants.
            // Then we just add that code that is related to that api call and presto.

            var properties = api.datatypes[apiCall.request].properties;

            for(var z in properties)
            {
                var objectRequestString = "";
                var property = properties[z];

                switch(property.jsontype)
                {
                    case "String":
                        if(property.name == "ParamsEncoded") {
                        %>    if (request.ParamsEncoded != "") OutRestJsonObj->SetStringField(TEXT("<%- property.name %>"), request.<%- property.name %>);
<%                            break;
                        }
                        if(property.name == "TitleId") {
                        %>    OutRestJsonObj->SetStringField(TEXT("<%- property.name %>"), IPlayFab::Get().getGameTitleId());
<%                            break;
                        }
                        if(property.hasOwnProperty('collection')) {
                            if(property.collection == "array") {
                            %>    // Check to see if string is empty
<%                            %>    if (request.<%- property.name %>.IsEmpty() || request.<%- property.name %> == "")
<%                            %>    {
<%                            %>        OutRestJsonObj->SetFieldNull(TEXT("<%- property.name %>"));
<%                            %>    }
<%                            %>    else
<%                            %>    {
<%                            %>        TArray<FString> <%- property.name %>Array;
<%                            %>        FString(request.<%- property.name %>).ParseIntoArray(<%- property.name %>Array, TEXT(","), false);
<%                            %>        OutRestJsonObj->SetStringArrayField(TEXT("<%- property.name %>"), <%- property.name %>Array);
<%                            %>    }

<%
                            }
                            else
                            {
                            %>    if (request.<%- property.name %> != NULL) OutRestJsonObj->SetObjectField(TEXT("<%- property.name %>"), request.<%- property.name %>);
<%
                            }
                        }
                        else if(property.actualtype == "UserDataPermission") {
                        %>    if (request.<%- property.name %> == EPermissionEnum::PUBLIC) OutRestJsonObj->SetStringField(TEXT("<%- property.name %>"), TEXT("Public"));
<%                        %>    if (request.<%- property.name %> == EPermissionEnum::PRIVATE) OutRestJsonObj->SetStringField(TEXT("<%- property.name %>"), TEXT("Private"));
<%
                        }
                        else
                        {
                        %>    if (request.<%- property.name %>.IsEmpty() || request.<%- property.name %> == "")
<%                        %>    {
<%                        %>        OutRestJsonObj->SetFieldNull(TEXT("<%- property.name %>"));
<%                        %>    }
<%                        %>    else
<%                        %>    {
<%                        %>        OutRestJsonObj->SetStringField(TEXT("<%- property.name %>"), request.<%- property.name %>);
<%                        %>    }

<%
                        }
                        break;

                    case "Number":
                        if(property.hasOwnProperty('collection'))
                        {
                            if(property.collection == "array") {
                            %>    // Copy int array to float
<%                            %>    TArray<float> tempArray;
<%                            %>    for (int32 i = 0; i < request.<%- property.name %>.Num(); ++i)
<%                            %>    {
<%                            %>        tempArray.Add(float(request.<%- property.name %>[i]));
<%                            %>    }
<%                            %>    OutRestJsonObj->SetNumberArrayField(TEXT("<%- property.name %>"), tempArray);

<%
                            }
                            else
                            {
                            %>    if (request.<%- property.name %> != NULL) OutRestJsonObj->SetObjectField(TEXT("<%- property.name %>"), request.<%- property.name %>);
<%
                            }
                        }
                        else
                        {
                        %>    OutRestJsonObj->SetNumberField(TEXT("<%- property.name %>"), request.<%- property.name %>);
<%
                        }
                        break;

                    case "Object":
                        if(property.hasOwnProperty('collection')) {
                            if(property.collection == "array")
                            {
                            %>    OutRestJsonObj->SetObjectArrayField(TEXT("<%- property.name %>"), request.<%- property.name %>);
<%
                            } else {
                            %>    if (request.<%- property.name %> != NULL) OutRestJsonObj->SetObjectField(TEXT("<%- property.name %>"), request.<%- property.name %>);
<%
                            }
                        } else {
                        %>    if (request.<%- property.name %> != NULL) OutRestJsonObj->SetObjectField(TEXT("<%- property.name %>"), request.<%- property.name %>);
<%
                        }
                        break;

                    case "Boolean":
                        if(property.hasOwnProperty('collection')) {
                            if(property.collection == "array") {
                            %>    OutRestJsonObj->SetBoolArrayField(TEXT("<%- property.name %>"), request.<%- property.name %>);
<%
                            } else {
                            %>    if (request.<%- property.name %> != NULL) OutRestJsonObj->SetObjectField(TEXT("<%- property.name %>"), request.<%- property.name %>);
<%
                            }
                        } else {
                        %>    OutRestJsonObj->SetBoolField(TEXT("<%- property.name %>"), request.<%- property.name %>);
<%
                        }
                        break;
                }
        }
              %>
<%            %>	// Add Request to manager
<%            %>	manager->SetRequestObject(OutRestJsonObj);
<%            %>
<%            %>	return manager;
<%            %>}
<%            %>
<%            %>/** <%- apiCall.summary %> */
<%            %>UPlayFab<%- api.name %>API* UPlayFab<%- api.name %>API::PlayFab<%- apiCall.name %>(F<%- api.name %><%- apiCall.request %> request,
<%            %>	FDelegateOnSuccess<%- apiCall.name %> onSuccess,
<%            %>    FDelegateOnFailurePlayFabError onFailure)
<%            %>{
<%            %>    // Objects containing request data
<%            %>    UPlayFab<%- api.name %>API* manager = NewObject<UPlayFab<%- api.name %>API>();
<%            %>    UPlayFabJsonObject* OutRestJsonObj = NewObject<UPlayFabJsonObject>();
<%            %>
<%            %>	// Assign delegates
<%            %>	manager->OnSuccess<%- apiCall.name %> = onSuccess;
<%            %>	manager->OnFailure = onFailure;
<%            %>	manager->OnPlayFabResponse.AddDynamic(manager, &UPlayFab<%- api.name %>API::Helper<%- apiCall.name %>);
<%            %>
<%            %>    // Setup the request
<%            %>    manager->PlayFabRequestURL = "<%- apiCall.url %>";
<%

                // If the api requires a sessionticket we add it, if not then leave it blank

                if(apiCall.auth == "SessionTicket")
                {
                %>    manager->useSessionTicket = true;
<%
                }
                else
                {
                %>    manager->useSessionTicket = false;
<%
                }

                // If the api requires the secret key we say true so it pulls from the PlayFab Module
                // However if this is the client SDK we don't include the secret key.

                if(libname != "Client")
                {
                    if(apiCall.auth == "SecretKey")
                    {
                    %>    manager->useSecretKey = true;
<%
                    }
                    else
                    {
                    %>    manager->useSecretKey = false;
<%
                    }
                }

                // If this deals with cloud script set the cloudscript bool
                if(apiCall.name == "RunCloudScript")
                {
                %>    manager->cloudScript = true;
<%
                }

                // If call is a login call set loginRequest true
                if (apiCall.result == "LoginResult")
                {
                %>    manager->isLoginRequest = true;
<%
                }
            %>

<%        %>    // Setup request object
<%

            // Now this is where the magic really happens.
            // Certain api calls require certain things, so we loop through each call to determine what it wants.
            // Then we just add that code that is related to that api call and presto.

            var properties = api.datatypes[apiCall.request].properties;

            for(var z in properties)
            {
                var objectRequestString = "";
                var property = properties[z];

                switch(property.jsontype)
                {
                    case "String":
                        if(property.name == "ParamsEncoded") {
                        %>    if (request.ParamsEncoded != "") OutRestJsonObj->SetStringField(TEXT("<%- property.name %>"), request.<%- property.name %>);
<%                            break;
                        }
                        if(property.name == "TitleId") {
                        %>    OutRestJsonObj->SetStringField(TEXT("<%- property.name %>"), IPlayFab::Get().getGameTitleId());
<%                            break;
                        }
                        if(property.hasOwnProperty('collection')) {
                            if(property.collection == "array") {
                            %>    // Check to see if string is empty
<%                            %>    if (request.<%- property.name %>.IsEmpty() || request.<%- property.name %> == "")
<%                            %>    {
<%                            %>        OutRestJsonObj->SetFieldNull(TEXT("<%- property.name %>"));
<%                            %>    }
<%                            %>    else
<%                            %>    {
<%                            %>        TArray<FString> <%- property.name %>Array;
<%                            %>        FString(request.<%- property.name %>).ParseIntoArray(<%- property.name %>Array, TEXT(","), false);
<%                            %>        OutRestJsonObj->SetStringArrayField(TEXT("<%- property.name %>"), <%- property.name %>Array);
<%                            %>    }

<%
                            }
                            else
                            {
                            %>    if (request.<%- property.name %> != NULL) OutRestJsonObj->SetObjectField(TEXT("<%- property.name %>"), request.<%- property.name %>);
<%
                            }
                        }
                        else if(property.actualtype == "UserDataPermission") {
                        %>    if (request.<%- property.name %> == EPermissionEnum::PUBLIC) OutRestJsonObj->SetStringField(TEXT("<%- property.name %>"), TEXT("Public"));
<%                        %>    if (request.<%- property.name %> == EPermissionEnum::PRIVATE) OutRestJsonObj->SetStringField(TEXT("<%- property.name %>"), TEXT("Private"));
<%
                        }
                        else
                        {
                        %>    if (request.<%- property.name %>.IsEmpty() || request.<%- property.name %> == "")
<%                        %>    {
<%                        %>        OutRestJsonObj->SetFieldNull(TEXT("<%- property.name %>"));
<%                        %>    }
<%                        %>    else
<%                        %>    {
<%                        %>        OutRestJsonObj->SetStringField(TEXT("<%- property.name %>"), request.<%- property.name %>);
<%                        %>    }

<%
                        }
                        break;

                    case "Number":
                        if(property.hasOwnProperty('collection'))
                        {
                            if(property.collection == "array") {
                            %>    // Copy int array to float
<%                            %>    TArray<float> tempArray;
<%                            %>    for (int32 i = 0; i < request.<%- property.name %>.Num(); ++i)
<%                            %>    {
<%                            %>        tempArray.Add(float(request.<%- property.name %>[i]));
<%                            %>    }
<%                            %>    OutRestJsonObj->SetNumberArrayField(TEXT("<%- property.name %>"), tempArray);

<%
                            }
                            else
                            {
                            %>    if (request.<%- property.name %> != NULL) OutRestJsonObj->SetObjectField(TEXT("<%- property.name %>"), request.<%- property.name %>);
<%
                            }
                        }
                        else
                        {
                        %>    OutRestJsonObj->SetNumberField(TEXT("<%- property.name %>"), request.<%- property.name %>);
<%
                        }
                        break;

                    case "Object":
                        if(property.hasOwnProperty('collection')) {
                            if(property.collection == "array")
                            {
                            %>    OutRestJsonObj->SetObjectArrayField(TEXT("<%- property.name %>"), request.<%- property.name %>);
<%
                            } else {
                            %>    if (request.<%- property.name %> != NULL) OutRestJsonObj->SetObjectField(TEXT("<%- property.name %>"), request.<%- property.name %>);
<%
                            }
                        } else {
                        %>    if (request.<%- property.name %> != NULL) OutRestJsonObj->SetObjectField(TEXT("<%- property.name %>"), request.<%- property.name %>);
<%
                        }
                        break;

                    case "Boolean":
                        if(property.hasOwnProperty('collection')) {
                            if(property.collection == "array") {
                            %>    OutRestJsonObj->SetBoolArrayField(TEXT("<%- property.name %>"), request.<%- property.name %>);
<%
                            } else {
                            %>    if (request.<%- property.name %> != NULL) OutRestJsonObj->SetObjectField(TEXT("<%- property.name %>"), request.<%- property.name %>);
<%
                            }
                        } else {
                        %>    OutRestJsonObj->SetBoolField(TEXT("<%- property.name %>"), request.<%- property.name %>);
<%
                        }
                        break;
                }
        }
              %>
<%            %>	// Add Request to manager
<%            %>	manager->SetRequestObject(OutRestJsonObj);
<%            %>
<%            %>	return manager;
<%            %>}
<%            %>
<%            %>// Implements FOnPlayFab<%- api.name %>RequestCompleted
<%            %>void UPlayFab<%- api.name %>API::Helper<%- apiCall.name %>(FPlayFabBaseModel response, bool successful)
<%            %>{
<%            %>	FPlayFabError error = response.responseError;
<%            %>	if (error.hasError)
<%            %>	{
<%            %>		if (OnFailure.IsBound())
<%            %>		{
<%            %>			OnFailure.Execute(error);
<%            %>		}
<%            %>	}
<%            %>	else
<%            %>	{
<%
				var found = false;
                for(var i2 in api.datatypes)
                {
                    var datatype = api.datatypes[i2];
                    if(datatype.name != apiCall.request)
                    {
                        if (datatype.name != apiCall.result)
                        {
                            continue;
                        }
                    }

                    //Check if datatype has been made already
                    if (modelsArray.indexOf(datatype.name.toString()) > -1) {continue;}

                    // Add datatype name to array
                    modelsArray.push(datatype.name.toString());

                    if(datatype.name.substr(datatype.name.length - 7) == "Request") {continue;} // go to next model if it is a request
					
					if (datatype.name == apiCall.result) {
						found = true;

              %>		F<%- api.name %><%- apiCall.result %> result = UPlayFab<%- api.name %>ModelDecoder::decode<%- datatype.name %>Response(response.responseData);
<%            %>		if (OnSuccess<%- apiCall.name %>.IsBound())
<%            %>		{
<%            %>			OnSuccess<%- apiCall.name %>.Execute(result);
<%            %>		}
<%
						break;
					}
				}
				
				if (!found) {
              %>		F<%- api.name %><%- apiCall.result %> result = UPlayFab<%- api.name %>ModelDecoder::decode<%- apiCall.result %>Response(response.responseData);
<%            %>		if (OnSuccess<%- apiCall.name %>.IsBound())
<%            %>		{
<%            %>			OnSuccess<%- apiCall.name %>.Execute(result);
<%            %>		}
<%
				}
				
              %>	}
<%            %>}
<%            %>
<%}
    }
} %>

void UPlayFab<%- api.name %>API::OnProcessRequestComplete(FHttpRequestPtr Request, FHttpResponsePtr Response, bool bWasSuccessful)
{
    // Be sure that we have no data from previous response
    ResetResponseData();

    FPlayFabBaseModel myResponse;

    // Check we have result to process futher
    if (!bWasSuccessful)
    {
        UE_LOG(LogPlayFab, Error, TEXT("Request failed: %s"), *Request->GetURL());

        // Broadcast the result event
        myResponse.responseError.ErrorCode = 500;
        myResponse.responseError.ErrorName = "Request Error";
        myResponse.responseError.ErrorMessage = "HTTP Request Error";

        myResponse.responseData = ResponseJsonObj;

        <%- api.name %>_proxy->OnPlayFabResponse.Broadcast(myResponse, false);

        return;
    }

    // Save response data as a string
    ResponseContent = Response->GetContentAsString();

    // Save response code as int32
    ResponseCode = Response->GetResponseCode();

    // Try to deserialize data to JSON
    TSharedRef<TJsonReader<TCHAR>> JsonReader = TJsonReaderFactory<TCHAR>::Create(ResponseContent);
    FJsonSerializer::Deserialize(JsonReader, ResponseJsonObj->GetRootObject());

    // Decide whether the request was successful
    bIsValidJsonResponse = bWasSuccessful && ResponseJsonObj->GetRootObject().IsValid();

    // Log errors
    if (!bIsValidJsonResponse)
    {
        if (!ResponseJsonObj->GetRootObject().IsValid())
        {
            // As we assume it's recommended way to use current class, but not the only one,
            // it will be the warning instead of error
            UE_LOG(LogPlayFab, Warning, TEXT("JSON could not be decoded!"));
        }
    }

    // Serialize data to json string
    FString InputString;
    TSharedRef< TJsonWriter<> > Writer = TJsonWriterFactory<>::Create(&InputString);
    FJsonSerializer::Serialize(ResponseJsonObj->GetRootObject().ToSharedRef(), Writer);

    // Log response state
    UE_LOG(LogPlayFab, Log, TEXT("Response : %s"), *InputString);

    myResponse.responseError.decodeError(ResponseJsonObj);
    myResponse.responseData = ResponseJsonObj;

<% if (hasClientOptions) {
%>    if (isLoginRequest)
    {
        IPlayFab* pfSettings = &(IPlayFab::Get());
        pfSettings->setSessionTicket(myResponse.responseData->GetObjectField("data")->GetStringField("SessionTicket"));
        bool needsAttribution = myResponse.responseData->GetObjectField("data")->GetBoolField("SessionTicket");
        if (needsAttribution && !pfSettings->DisableAdvertising && !pfSettings->AdvertisingIdType.IsEmpty() && !pfSettings->AdvertisingIdValue.IsEmpty())
        {
            FClientAttributeInstallRequest request;
            bool makeAttrCall = true;
            if (pfSettings->AdvertisingIdType == IPlayFab::AD_TYPE_IDFA)
                request.Idfa = pfSettings->AdvertisingIdValue;
            else if (pfSettings->AdvertisingIdType == IPlayFab::AD_TYPE_ANDROID_ID)
                request.Android_Id = pfSettings->AdvertisingIdValue;
            else
                makeAttrCall = false;
            if (makeAttrCall)
            {
                auto callObj = AttributeInstall(request);
                callObj->Activate();
                if (callObj->IsValidLowLevel())
                    callObj->ConditionalBeginDestroy();
            }
        }
    }

<% } %>    // Broadcast the result event
    <%- api.name %>_proxy->OnPlayFabResponse.Broadcast(myResponse, true);
}

void UPlayFab<%- api.name %>API::Activate()
{
    FString RequestUrl = TEXT("https://") + IPlayFab::Get().getGameTitleId() + IPlayFab::PlayFabURL;

    // Build the full request url
    if (cloudScript)
    {
        RequestUrl = TEXT("https://") + IPlayFab::Get().getGameTitleId() + IPlayFab::PlayFabLogicURL + FString::FromInt(IPlayFab::Get().CloudScriptVersion) + TEXT("/prod");
    }

    RequestUrl = RequestUrl + PlayFabRequestURL;

    TSharedRef<IHttpRequest> HttpRequest = FHttpModule::Get().CreateRequest();
    HttpRequest->SetURL(RequestUrl);

    if (useSessionTicket)
    {
        HttpRequest->SetHeader("X-Authentication", IPlayFab::Get().getSessionTicket());
    }
    if (useSecretKey)
    {
        HttpRequest->SetHeader("X-SecretKey", IPlayFab::Get().getSecretApiKey());
    }

    // Set verb
    HttpRequest->SetVerb("POST");


    // Set content-type
    HttpRequest->SetHeader("Content-Type", "application/json");

    // Serialize data to json string
    FString OutputString;
    TSharedRef< TJsonWriter<> > Writer = TJsonWriterFactory<>::Create(&OutputString);
    FJsonSerializer::Serialize(RequestJsonObj->GetRootObject().ToSharedRef(), Writer);

    // Set Json content
    HttpRequest->SetContentAsString(OutputString);

    // Apply additional headers
    for (TMap<FString, FString>::TConstIterator It(RequestHeaders); It; ++It)
    {
        HttpRequest->SetHeader(It.Key(), It.Value());
    }

    UE_LOG(LogPlayFab, Log, TEXT("Request: %s"), *OutputString);

    // Bind event
    HttpRequest->OnProcessRequestComplete().BindUObject(this, &UPlayFab<%- api.name %>API::OnProcessRequestComplete);

    // Execute the request
    HttpRequest->ProcessRequest();
}

void UPlayFab<%- api.name %>API::ResetResponseData()
{
    if (ResponseJsonObj != NULL)
    {
        ResponseJsonObj->Reset();
    }
    else
    {
        ResponseJsonObj = NewObject<UPlayFabJsonObject>();
    }

    bIsValidJsonResponse = false;
}
