using System;
using UnityEngine;
using PlayFab;
using PlayFab.ClientModels;
using strange.extensions.command.impl;

public class SetupPlayFabCommand : Command
{
    [Inject] public PlayFabDataStore PlayFabDataStore { get; set; }
    public override void Execute()
    {
        PlayFabSettings.TitleId = PlayFabDataStore.TitleId;
        PlayFabSettings.RequestType = WebRequestType.UnityWww;
    }
}

public class LoginToPlayFabCommand : Command
{
    [Inject] public PlayFabDataStore PlayFabDataStore { get; set; }
    //Inject various signals that can be used here.
    [Inject] public LoginWithAndroidDeviceIDSignal LoginAndroidSignal { get; set; }
    [Inject] public LoginWithIOSDeviceIDSignal LoginIosSignal { get; set; }
    [Inject] public LoginWithCustomIDSignal LoginCustomSignal { get; set; }
    [Inject] public LoginWithFacebookSignal LoginFacebookSignal { get; set; }
    [Inject] public LoginWithKongregateSignal LoginKongregateSignal { get; set; }
    [Inject] public LoginWithSteamSignal LoginSteamSignal { get; set; }
    [Inject] public LoginWithGoogleAccountSignal LoginGoogleSignal { get; set; }
    [Inject] public LoginWithGameCenterSignal LoginGameCenterSignal { get; set; }
    [Inject] public LoginWithEmailAddressSignal LoginEmailSignal { get; set; }
    [Inject] public LoginWithPlayFabSignal LoginPlayFabSignal { get; set; }

    public override void Execute()
    {
        Retain();
        switch (PlayFabDataStore.LinkType)
        {
            case LoginLinkType.Android:
                LoginAndroidSignal.Dispatch(new LoginWithAndroidDeviceIDRequest()
                {
                    AndroidDeviceId = PlayFabDataStore.DeviceId,
                    AndroidDevice = SystemInfo.deviceModel,
                    CreateAccount = true,
                    OS = SystemInfo.operatingSystem,
                    TitleId = PlayFabDataStore.TitleId
                });
            break;
            case LoginLinkType.Ios:
                LoginIosSignal.Dispatch(new LoginWithIOSDeviceIDRequest()
                {
                    DeviceId = PlayFabDataStore.DeviceId,
                    DeviceModel = SystemInfo.deviceModel,
                    OS = SystemInfo.operatingSystem,
                    CreateAccount = true,
                    TitleId = PlayFabDataStore.TitleId
                });
            break;
            case LoginLinkType.Facebook:
                LoginFacebookSignal.Dispatch(new LoginWithFacebookRequest()
                {
                    AccessToken = PlayFabDataStore.FBAccessToken,
                    CreateAccount = true,
                    TitleId = PlayFabDataStore.TitleId
                });
            break;
            case LoginLinkType.Kongregate:
                LoginKongregateSignal.Dispatch(new LoginWithKongregateRequest()
                {
                    AuthTicket = PlayFabDataStore.KongAuthTicket,
                    KongregateId = PlayFabDataStore.KongregateId,
                    CreateAccount = true,
                    TitleId = PlayFabDataStore.TitleId
                });
            break;
            case LoginLinkType.Steam:
                LoginSteamSignal.Dispatch(new LoginWithSteamRequest()
                {
                    SteamTicket = PlayFabDataStore.SteamTicket,
                    CreateAccount = true,
                    TitleId = PlayFabDataStore.TitleId
                });
            break;
            case LoginLinkType.GameCenter:
                LoginGameCenterSignal.Dispatch(new LoginWithGameCenterRequest()
                {
                    PlayerId = PlayFabDataStore.GameCenterPlayerId,
                    CreateAccount = true,
                    TitleId = PlayFabDataStore.TitleId
                });
            break;
            case LoginLinkType.Google:
                LoginGoogleSignal.Dispatch(new LoginWithGoogleAccountRequest()
                {
                    PublisherId = PlayFabDataStore.GooglePublisherId,
                    AccessToken = PlayFabDataStore.GoogleTicket,
                    CreateAccount = true,
                    TitleId = PlayFabDataStore.TitleId
                });
            break;
            case LoginLinkType.Custom:
            default:
                LoginCustomSignal.Dispatch(new LoginWithCustomIDRequest()
                {
                    CustomId = PlayFabDataStore.DeviceId,
                    CreateAccount = true,
                    TitleId = PlayFabDataStore.TitleId
                });
            break;
        }

    }
}

public class GetLinkTypeCommand : Command
{
    [Inject] public PlayFabDataStore PlayFabDataStore { get; set; }

    public override void Execute()
    {

        PlayFabDataStore.LinkType = LoginLinkType.None;
        if (PlayerPrefs.HasKey("LinkType"))
        {
            PlayFabDataStore.LinkType = (LoginLinkType) PlayerPrefs.GetInt("LinkType");
        }
        else
        {
            switch (PlayFabDataStore.Platform)
            {
                case PlatformTypes.Desktop:
                PlayFabDataStore.LinkType = LoginLinkType.Custom;
                break;
                case PlatformTypes.Android:
                PlayFabDataStore.LinkType = LoginLinkType.Android;
                break;
                case PlatformTypes.Ios:
                PlayFabDataStore.LinkType = LoginLinkType.Ios;
                break;
            }
        }

        if (PlayerPrefs.HasKey("PlayFab.FBAccessToken"))
        {
            PlayFabDataStore.FBAccessToken = PlayerPrefs.GetString("PlayFab.FBAccessToken");
        }

        if (PlayerPrefs.HasKey("PlayFab.KongAccessToken"))
        {
            PlayFabDataStore.KongAuthTicket = PlayerPrefs.GetString("PlayFab.KongAccessToken");
        }

        if (PlayerPrefs.HasKey("PlayFab.SteamTicket"))
        {
            PlayFabDataStore.SteamTicket = PlayerPrefs.GetString("PlayFab.SteamTicket");
        }

        if (PlayerPrefs.HasKey("PlayFab.GoogleTicket"))
        {
            PlayFabDataStore.GoogleTicket = PlayerPrefs.GetString("PlayFab.GoogleTicket");
        }
    }
}

public class GetPlatFormCommand : Command
{
    [Inject] public PlayFabDataStore PlayFabDataStore {get; set;}
    public override void Execute()
    {
        var DeviceId = SystemInfo.deviceUniqueIdentifier;
        Debug.Log(DeviceId);
        var Platform = PlatformTypes.Desktop;

#if UNITY_ANDROID && !UNITY_EDITOR
        Platform = PlatformTypes.Android;
        AndroidJavaClass up = new AndroidJavaClass("com.unity3d.player.UnityPlayer");
        AndroidJavaObject currentActivity = up.GetStatic<AndroidJavaObject>("currentActivity");
        AndroidJavaObject contentResolver = currentActivity.Call<AndroidJavaObject>("getContentResolver");
        AndroidJavaClass secure = new AndroidJavaClass("android.provider.Settings$Secure");
        DeviceId = secure.CallStatic<string>("getString", contentResolver, "android_id");
#endif

#if UNITY_IOS && !UNITY_EDITOR
        Platform = PlatformTypes.Ios;
#endif

        PlayFabDataStore.DeviceId = DeviceId;
        PlayFabDataStore.Platform = Platform;
    }
}

public class LoginHelper
{
    public static void LoginLogic(PlayFabDataStore playFabDataStore, LoginResult result)
    {
        playFabDataStore.PlayFabId = result.PlayFabId;
        playFabDataStore.SessionTicket = result.SessionTicket;

        if (PlayerPrefs.HasKey("PlayFabSessionExpires"))
        {
            var date = DateTime.Parse(PlayerPrefs.GetString("PlayFabSessionExpires"));
            playFabDataStore.SessionExpires = date;
        }
        else
        {
            // Less one hour so we always invalidate 1 hour before session ticket expires.
            playFabDataStore.SessionExpires = DateTime.Now.AddHours(23);
        }
    }
}

<% for(var i=0; i< api.subgroups.length; i++){ %><% var subgroup = api.subgroups[i]; %>
//<%-subgroup.name%>
#region <%-subgroup.name%>
<% for(var x=0; x<subgroup.methods.length; x++){ %><% var apiCall = api.calls.filter(function(el){ return el.name === subgroup.methods[x]; })[0];%><% if( !apiCall ) { %><% continue; %><% } %>
///<summary>
///<%- apiCall.summary%>
///</summary>
public class <%-apiCall.name%>Command : Command {
    [Inject] public <%-apiCall.name%>ResponseSignal ResponseSignal {get; set;}
    [Inject] public <%-apiCall.request%> Request {get; set;}
    public override void Execute(){
        Retain();
        PlayFabClientAPI.<%-apiCall.name%>(Request,(result)=>{
            Release();
            ResponseSignal.Dispatch(result);
        }, PlayFabErrorHandler.HandlePlayFabError);
    }
}
<%}%>
#endregion<%}%>
