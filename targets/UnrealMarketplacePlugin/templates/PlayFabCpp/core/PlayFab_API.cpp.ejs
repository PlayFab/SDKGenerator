<%- copyright %>

// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#include "Core/PlayFab<%- api.name %>API.h"
#include "Core/PlayFabSettings.h"
#include "Core/PlayFabResultHandler.h"
#include "PlayFab.h"

using namespace PlayFab;
using namespace PlayFab::<%- api.name %>Models;

FPlayFab<%- api.name %>API::FPlayFab<%- api.name %>API() {}

FPlayFab<%- api.name %>API::~FPlayFab<%- api.name %>API() {}

int FPlayFab<%- api.name %>API::GetPendingCalls() const
{
    return PlayFabRequestHandler::GetPendingCalls();
}

FString FPlayFab<%- api.name %>API::GetBuildIdentifier() const
{
    return PlayFabSettings::buildIdentifier;
}

void FPlayFab<%- api.name %>API::SetTitleId(const FString& titleId)
{
    PlayFabSettings::SetTitleId(titleId);
}
<% if (hasClientOptions) { %>
bool FPlayFabClientAPI::SetAdvertId(const FString& advertisingIdType, const FString& advertisingIdValue)
{
    // TODO: Work on exposing PlayFabSettings::AD_TYPE_X vars, for now, just validate against them
    bool valid = advertisingIdType == PlayFabSettings::AD_TYPE_IDFA || advertisingIdType == PlayFabSettings::AD_TYPE_ANDROID_ID;
    if (valid)
    {
        PlayFabSettings::SetAdvertisingIdType(advertisingIdType);
        PlayFabSettings::SetAdvertisingIdValue(advertisingIdValue);
    }
    return valid;
}

bool FPlayFabClientAPI::AdvertIdSuccessful()
{
    return PlayFabSettings::GetAdvertisingIdType().EndsWith("_Successful");
}

bool FPlayFabClientAPI::IsClientLoggedIn() const
{
    return !PlayFabSettings::GetClientSessionTicket().IsEmpty();
}

void FPlayFabClientAPI::MultiStepClientLogin(bool needsAttribution)
{
    if (needsAttribution && !PlayFabSettings::GetDisableAdvertising() && !PlayFabSettings::GetAdvertisingIdType().IsEmpty() && !PlayFabSettings::GetAdvertisingIdValue().IsEmpty())
    {
        PlayFab::ClientModels::FAttributeInstallRequest request{};
        if (PlayFabSettings::GetAdvertisingIdType() == PlayFabSettings::AD_TYPE_IDFA)
            request.Idfa = PlayFabSettings::GetAdvertisingIdValue();
        else if (PlayFabSettings::GetAdvertisingIdType() == PlayFabSettings::AD_TYPE_ANDROID_ID)
            request.Adid = PlayFabSettings::GetAdvertisingIdValue();
        else
            return;
        AttributeInstall(request);
    }
}
<% } %>
void FPlayFab<%- api.name %>API::SetDevSecretKey(const FString& developerSecretKey)
{
    PlayFabSettings::SetDeveloperSecretKey(developerSecretKey);
}<% for(var i in api.calls) { var apiCall = api.calls[i];%>
<% if (!hasRequest(apiCall, api)) { %>
bool FPlayFab<%- api.name %>API::<%- apiCall.name %>(
    const F<%- apiCall.name %>Delegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    <%- api.name %>Models::F<%- apiCall.request %> emptyRequest = <%- api.name %>Models::F<%- apiCall.request %>();
    return FPlayFab<%- api.name %>API::<%- apiCall.name %>(emptyRequest, SuccessDelegate, ErrorDelegate);
}
<% } %>
bool FPlayFab<%- api.name %>API::<%- apiCall.name %>(
    <%- api.name %>Models::F<%- apiCall.request %>& request,
    const F<%- apiCall.name %>Delegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
<%- getRequestActions("    ", apiCall, false)
%>    auto HttpRequest = PlayFabRequestHandler::SendRequest(<%- getUrlAccessor(apiCall, false) %>, request.toJSONString(), <%- getAuthParams(apiCall, false) %>);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &FPlayFab<%- api.name %>API::On<%- apiCall.name %>Result, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void FPlayFab<%- api.name %>API::On<%- apiCall.name %>Result(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, F<%- apiCall.name %>Delegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    <%- api.name %>Models::F<%- apiCall.result%> outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
<%- getResultActions("        ", apiCall, false)
%>        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}<% } %>
