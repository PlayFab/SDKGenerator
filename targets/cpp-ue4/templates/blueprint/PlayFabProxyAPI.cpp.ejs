// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#include "PlayFabProxyPrivatePCH.h"
#include "PlayFab.h"
#include "PF<%- api.name %><%- apiCall.name %>.h"

UPF<%- api.name %><%- apiCall.name %>::UPF<%- api.name %><%- apiCall.name %>(const FObjectInitializer& ObjectInitializer)
	: Super(ObjectInitializer)
	, SuccessDelegate(PlayFab::UPlayFab<%- api.name %>API::F<%- apiCall.name %>Delegate::CreateUObject(this, &ThisClass::OnSuccessCallback))
	, ErrorDelegate(PlayFab::FPlayFabErrorDelegate::CreateUObject(this, &ThisClass::OnErrorCallback))
{
}

UPF<%- api.name %><%- apiCall.name %>* UPF<%- api.name %><%- apiCall.name %>::<%- apiCall.name %>(UObject* WorldContextObject, class APlayerController* PlayerController <%- getDatatypeSignatureInputParameters(apiCall, api) %>)
{
	UPF<%- api.name %><%- apiCall.name %>* Proxy = NewObject<UPF<%- api.name %><%- apiCall.name %>>();
 	//Proxy->PlayerControllerWeakPtr = PlayerController;
	<% if(hasRequest(apiCall, api)) { 
	var datatype = api.datatypes[apiCall.request];

    for (var p in datatype.properties) {
        var property = datatype.properties[p];
	%><%- generateProxyPropertyCopy(property, api) 
	%>
	<% } } %>

 	//Proxy->WorldContextObject = WorldContextObject;
	return Proxy;
}

void UPF<%- api.name %><%- apiCall.name %>::Activate()
{
	// grab the module, so we can get a valid pointer to the client API 
	PlayFab<%- api.name %>Ptr <%- api.name %>API = IPlayFabModuleInterface::Get().Get<%- api.name %>API();

	bool CallResult = false;

	if(<%- api.name %>API.IsValid())
	{	
		<% if(hasRequest(apiCall, api)) { 
		%>CallResult = <%- api.name %>API-><%- apiCall.name %>(Request, SuccessDelegate, ErrorDelegate);<% 
		} 
		else 
		{ %>CallResult = <%- api.name %>API-><%- apiCall.name %>(SuccessDelegate, ErrorDelegate);<% 
		} %>
	}

	if(CallResult == false)
	{
		<% if(hasResult(apiCall, api)) {
	%>FBP<%- api.name%><%- apiCall.result %> BPResult;
 		OnFailure.Broadcast(BPResult);<% 
	 } else 
	 {%>OnFailure.Broadcast();<% }%>
	}
}


//////////////////////////////////////////////////////////////////////////
// Delegate handles
void UPF<%- api.name %><%- apiCall.name %>::OnSuccessCallback(const PlayFab::<%- api.name %>Models::F<%- apiCall.result %>& Result)
{
	<% if(hasResult(apiCall, api)) {
	%>FBP<%- api.name%><%- apiCall.result %> BPResult;
 	BPResult.Data = Result;
 	OnSuccess.Broadcast(BPResult);<% 
	 } else 
	 {%>OnSuccess.Broadcast();<% }%>
}

void UPF<%- api.name %><%- apiCall.name %>::OnErrorCallback(const PlayFab::FPlayFabError& InError)
{
	<% if(hasResult(apiCall, api)) {
	%>FBP<%- api.name%><%- apiCall.result %> BPResult;
 	OnFailure.Broadcast(BPResult);<% 
	 } else 
	 {%>OnFailure.Broadcast();<% }%>	
}
