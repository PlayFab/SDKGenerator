<%- copyright %>

// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#include "Core/PlayFab<%- api.name %>API.h"
#include "Core/PlayFabSettings.h"
#include "Core/PlayFabResultHandler.h"
#include "PlayFab.h"

using namespace PlayFab;
using namespace PlayFab::<%- api.name %>Models;

UPlayFab<%- api.name %>API::UPlayFab<%- api.name %>API() {}

UPlayFab<%- api.name %>API::~UPlayFab<%- api.name %>API() {}

int UPlayFab<%- api.name %>API::GetPendingCalls() const
{
    return PlayFabRequestHandler::GetPendingCalls();
}

FString UPlayFab<%- api.name %>API::GetBuildIdentifier() const
{
    return PlayFabSettings::buildIdentifier;
}

void UPlayFab<%- api.name %>API::SetTitleId(const FString& titleId)
{
    PlayFabSettings::titleId = titleId;
}
<% if (hasClientOptions) { %>
bool UPlayFabClientAPI::SetAdvertId(const FString& advertisingIdType, const FString& advertisingIdValue)
{
    // TODO: Work on exposing PlayFabSettings::AD_TYPE_X vars, for now, just validate against them
    bool valid = advertisingIdType == PlayFabSettings::AD_TYPE_IDFA || advertisingIdType == PlayFabSettings::AD_TYPE_ANDROID_ID;
    if (valid)
    {
        PlayFabSettings::advertisingIdType = advertisingIdType;
        PlayFabSettings::advertisingIdValue = advertisingIdValue;
    }
    return valid;
}

bool UPlayFabClientAPI::AdvertIdSuccessful()
{
    return PlayFabSettings::advertisingIdType.EndsWith("_Successful");
}

bool UPlayFabClientAPI::IsClientLoggedIn() const
{
    return !PlayFabSettings::clientSessionTicket.IsEmpty();
}

void UPlayFabClientAPI::MultiStepClientLogin(bool needsAttribution)
{
    if (needsAttribution && !PlayFabSettings::disableAdvertising && !PlayFabSettings::advertisingIdType.IsEmpty() && !PlayFabSettings::advertisingIdValue.IsEmpty())
    {
        PlayFab::ClientModels::FAttributeInstallRequest request;
        if (PlayFabSettings::advertisingIdType == PlayFabSettings::AD_TYPE_IDFA)
            request.Idfa = PlayFabSettings::advertisingIdValue;
        else if (PlayFabSettings::advertisingIdType == PlayFabSettings::AD_TYPE_ANDROID_ID)
            request.Adid = PlayFabSettings::advertisingIdValue;
        else
            return;
        AttributeInstall(request);
    }
}
<% } %>
void UPlayFab<%- api.name %>API::SetDevSecretKey(const FString& developerSecretKey)
{
    PlayFabSettings::developerSecretKey = developerSecretKey;
}
<% for(var i in api.calls) { var apiCall = api.calls[i];
%>
bool UPlayFab<%- api.name %>API::<%- apiCall.name %>(
    <% if (hasRequest(apiCall, api)) { %><%- api.name %>Models::F<%- apiCall.request %>& request,<% } %>
    const F<%- apiCall.name %>Delegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
<%- getRequestActions("    ", apiCall)
%>    auto HttpRequest = PlayFabRequestHandler::SendRequest(<%- getUrlAccessor(apiCall) %>, <% if (hasRequest(apiCall, api)) { %>request.toJSONString()<% } else { %>TEXT("{}")<% } %>, <%- getAuthParams(apiCall) %>);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFab<%- api.name %>API::On<%- apiCall.name %>Result, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFab<%- api.name %>API::On<%- apiCall.name %>Result(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, F<%- apiCall.name %>Delegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    <%- api.name %>Models::F<%- apiCall.result%> outResult;
    FPlayFabError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
<%- getResultActions("        ", apiCall)
%>        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}
<% } %>
