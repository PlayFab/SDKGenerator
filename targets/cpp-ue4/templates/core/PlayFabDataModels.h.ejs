// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#pragma once

#include "Core/PlayFabBaseModel.h"

namespace PlayFab
{
namespace <%- api.name %>Models
{

	<% for(var i in datatypes) { var datatype = datatypes[i]; if(datatype.isenum) { %>
	enum <%- datatype.name %>
	{
		<% for(var i=0; i<datatype.enumvalues.length-1; i++) { var enumval = datatype.enumvalues[i] %><%- datatype.name %><%- enumval.name %>,
		<% } %><%- datatype.name %><%- datatype.enumvalues[datatype.enumvalues.length-1].name %>
	};
	
	void write<%- datatype.name %>EnumJSON(<%- datatype.name %> enumVal, JsonWriter& writer);
	<%- datatype.name %> read<%- datatype.name %>FromValue(const TSharedPtr<FJsonValue>& value);
	
	<% } else { %>
	struct PLAYFAB_API F<%- datatype.name %> : public FPlayFabBaseModel
    {
		<% for(var i in datatype.properties) { var property = datatype.properties[i] %>
		<%- getPropertyDescription(property) %>
		<%- getPropertyDef(property, datatype) %><% } %>
	
        F<%- datatype.name %>() :
			FPlayFabBaseModel()<% for(var i in datatype.properties) { var property = datatype.properties[i] %>,
			<%- getPropertySafeName(property) %>(<%- getPropertyDefaultValue(property, datatype) %>)<% } %>
			{}
		
		F<%- datatype.name %>(const F<%- datatype.name %>& src) :
			FPlayFabBaseModel()<% for(var i in datatype.properties) { var property = datatype.properties[i] %>,
			<%- getPropertySafeName(property) %>(<%- getPropertyCopyValue(property, datatype) %>)<% } %>
			{}
			
		F<%- datatype.name %>(const TSharedPtr<FJsonObject>& obj) : F<%- datatype.name %>()
        {
            readFromValue(obj);
        }
		
		~F<%- datatype.name %>();
		
        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };
	<% } } %>

}
}

