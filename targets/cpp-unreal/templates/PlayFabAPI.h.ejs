#pragma once

//////////////////////////////////////////////////////////////////////////////////////////////
// Automatically generated header file for the UE4 PlayFab plugin.
// This header file contains the function definitions.
//
// API: <%- api.name %>
// SDK Version: <%- sdkVersion %>
//////////////////////////////////////////////////////////////////////////////////////////////

#include "OnlineBlueprintCallProxyBase.h"
#include "PlayFabBaseModel.h"
#include "PlayFab<%- api.name %>Models.h"
#include "PlayFabPrivatePCH.h"
#include "PlayFab<%- api.name %>API.generated.h"

DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(FOnPlayFab<%- api.name %>RequestCompleted, FPlayFabBaseModel, response, bool, successful);

UCLASS(Blueprintable, BlueprintType)
class UPlayFab<%- api.name %>API : public UOnlineBlueprintCallProxyBase
{
    GENERATED_UCLASS_BODY()

public:

	DECLARE_DYNAMIC_DELEGATE_OneParam(FDelegateOnFailurePlayFabError, FPlayFabError, error);

    UPROPERTY(BlueprintAssignable)
    FOnPlayFab<%- api.name %>RequestCompleted OnPlayFabResponse;
	
    /** Set the Request Json object */
    //UFUNCTION(BlueprintCallable, Category = "PlayFab")
        void SetRequestObject(UPlayFabJsonObject* JsonObject);

    /** Get the Response Json object */
    //UFUNCTION(BlueprintCallable, Category = "PlayFab")
        UPlayFabJsonObject* GetResponseObject();

    /** Applies percent-encoding to text */
    //UFUNCTION(BlueprintCallable, Category = "PlayFab")
        static FString PercentEncode(const FString& Text);

    /** Reset saved response data */
    //UFUNCTION(BlueprintCallable, Category = "PlayFab")
        void ResetResponseData();

    /** UOnlineBlueprintCallProxyBase interface */
    virtual void Activate() override;

    //////////////////////////////////////////////////////////////////////////
    // Generated PlayFab <%- api.name %> API Functions
    //////////////////////////////////////////////////////////////////////////

    <%

    // This loop goes through the subgroups of the api and orders the functions in groups.
    // It makes it a little easier to navigate.

    for(var subgroup in api.subgroups)
    {
    %>

    ///////////////////////////////////////////////////////
    // <%- api.subgroups[subgroup].name %>
    //////////////////////////////////////////////////////
<%

        // This loop goes through all the api calls.
        // It checks to see if the subgroup is the correct subgroup we are currently on.
        // If so it creates the function definition with the summary text.
        // This allows us to see the summary in UE4 when we hover over a node.

        for(var i in api.calls)
        {
            var apiCall = api.calls[i];
            if(apiCall.subgroup == api.subgroups[subgroup].name)
            {

              %>    /** <%- apiCall.summary %> */
<%            %>    UFUNCTION(BlueprintCallable, Category = "PlayFab | <%- api.name %> | <%- api.subgroups[subgroup].name %> ", meta = (BlueprintInternalUseOnly = "true", DeprecatedFunction))
<%            %>        static UPlayFab<%- api.name %>API* <%- apiCall.name %>(F<%- api.name %><%- apiCall.request %> request);
<%            %>
<%            %>    // callbacks
<%            %>    DECLARE_DYNAMIC_DELEGATE_OneParam(FDelegateOnSuccess<%- apiCall.name %>, F<%- api.name %><%- apiCall.result %>, result);
<%            %>
<%            %>    /** <%- apiCall.summary %> */
<%            %>	UFUNCTION(BlueprintCallable, Category = "PlayFab | <%- api.name %> | <%- api.subgroups[subgroup].name %> ", meta = (BlueprintInternalUseOnly = "true"))
<%            %>	static UPlayFab<%- api.name %>API* PlayFab<%- apiCall.name %>(F<%- api.name %><%- apiCall.request %> request,
<%            %>		FDelegateOnSuccess<%- apiCall.name %> onSuccess,
<%            %>    	FDelegateOnFailurePlayFabError onFailure);
<%            %>
<%            %>	// Implements FOnPlayFabClientRequestCompleted
<%            %>	UFUNCTION(BlueprintCallable, Category = "PlayFab | <%- api.name %> | <%- api.subgroups[subgroup].name %> ", meta = (BlueprintInternalUseOnly = "true"))
<%            %>	void Helper<%- apiCall.name %>(FPlayFabBaseModel response, bool successful);
<%            %>
<%
            }
        }
    } %>

    /** PlayFab Request Info */
    FString PlayFabRequestURL;
    bool useSecretKey = false;
    bool useSessionTicket = false;
    bool cloudScript = false;
    bool isLoginRequest = false;

    /** Is the response valid JSON? */
    bool bIsValidJsonResponse;
    FString ResponseContent;
    int32 ResponseCode;

private:
    /** Internal bind function for the IHTTPRequest::OnProcessRequestCompleted() event */
    void OnProcessRequestComplete(FHttpRequestPtr Request, FHttpResponsePtr Response, bool bWasSuccessful);
	
	FDelegateOnFailurePlayFabError OnFailure;
<%
    for(var subgroup in api.subgroups)
    {
        for(var i in api.calls)
        {
            var apiCall = api.calls[i];
            if(apiCall.subgroup == api.subgroups[subgroup].name)
            {
				var apiCall = api.calls[i];
				if(apiCall.subgroup == api.subgroups[subgroup].name)
				{
  						%>	FDelegateOnSuccess<%- apiCall.name %> OnSuccess<%- apiCall.name %>;
<%
				}
			}
		}
	}
%>
protected:

    /** Internal request data stored as JSON */
    UPROPERTY()
        UPlayFabJsonObject* RequestJsonObj;

    /** Response data stored as JSON */
    UPROPERTY()
        UPlayFabJsonObject* ResponseJsonObj;

    /** Mapping of header section to values. Used to generate final header string for request */
    TMap<FString, FString> RequestHeaders;
};
