<%- copyright %>

#include "PfTestActor.h"

#include "Tests/PlayFabCppTests.h"
#include "Tests/PlayFabBlueprintTests.h"

//#include "PlayFab/Public/IPlayFab.h"
//#include "PlayFabError.h"
//#include "PlayFabCpp/Public/Core/PlayFabClientDataModels.h"
//#include "PlayFabCpp/Public/Core/PlayFabCppBaseModel.h"
//#include "PlayFabCpp/Public/Core/PlayFabError.h"
//#include "PlayFabCpp/Public/Core/PlayFabClientAPI.h"

#include "IPlayFab.h"
#include "PlayFabCppBaseModel.h"
#include "PlayFabError.h"
#include "Core/PlayFabClientAPI.h"

// Sets default values
APfTestActor::APfTestActor()
{
    // Set this actor to call Tick() every frame.  You can turn this off to improve performance if you don't need it.
    PrimaryActorTick.bCanEverTick = true;
}

// Called when the game starts or when spawned
void APfTestActor::BeginPlay()
{
    Super::BeginPlay();

    AddTestCase(NewObject<UPlayFabCppTests>());
    AddTestCase(NewObject<UPlayFabBlueprintTests>());
    _submitCloudScript = false;
}

// Called every frame
void APfTestActor::Tick(float DeltaTime)
{
    Super::Tick(DeltaTime);

    Run(DeltaTime);

    if (this->SuiteState == PlayFabApiTestActiveState::COMPLETE && !_submitCloudScript)
    {
        _submitCloudScript = true;
        EmitCloudScriptResults();
    }
}

void APfTestActor::EmitCloudScriptResults()
{
    PlayFabClientPtr ClientAPI = IPlayFabModuleInterface::Get().GetClientAPI();

    TArray<TSharedPtr<FJsonValue>> TestReport;
    for (auto SuiteTest : SuiteTests)
    {
        FString finishStateStr;
        switch (SuiteTest->finishState)
        {
        case PlayFabApiTestFinishState::PASSED: finishStateStr = TEXT("PASSED");
            break;
        case PlayFabApiTestFinishState::FAILED: finishStateStr = TEXT("FAILED");
            break;
        case PlayFabApiTestFinishState::SKIPPED: finishStateStr = TEXT("SKIPPED");
            break;
        case PlayFabApiTestFinishState::TIMEDOUT: finishStateStr = TEXT("TIMEDOUT");
            break;
        default: finishStateStr = TEXT("");
            break;
        }

        TSharedPtr<FJsonObject> JsonObject = MakeShareable(new FJsonObject());
        JsonObject->SetStringField(TEXT("classname"), IPlayFab::Get().getBuildIdentifier());
        JsonObject->SetStringField(TEXT("name"), SuiteTest->testName); // This test's name.
        JsonObject->SetNumberField(TEXT("time"), SuiteTest->GetDurationInSeconds()); // End time is invalid here... so cheating a bit.
        JsonObject->SetStringField(TEXT("message"), SuiteTest->testResultMsg);
        JsonObject->SetStringField(TEXT("failureText"), finishStateStr); // Those two should match.
        JsonObject->SetStringField(TEXT("finishState"), finishStateStr); //
        JsonObject->SetObjectField(TEXT("stacktrace"), nullptr);

        TestReport.Add(MakeShareable(new FJsonValueObject(JsonObject)));
    }

    TSharedPtr<FJsonObject> finalJson = MakeShareable(new FJsonObject());
    finalJson->SetStringField(TEXT("customId"), ClientAPI->GetBuildIdentifier());
    finalJson->SetArrayField(TEXT("testReport"), TestReport);

    auto functionParameter = PlayFab::FJsonKeeper();
    functionParameter.readFromValue(MakeShareable(new FJsonValueObject(finalJson)));

    PlayFab::ClientModels::FExecuteCloudScriptRequest request;
    request.FunctionName = TEXT("SaveTestData");
    request.FunctionParameter = functionParameter;
    request.GeneratePlayStreamEvent = true;

    //UE_LOG(LogPlayFabCpp, Log, TEXT("Request: \n%s"), *request.toJSONString());

    ClientAPI->ExecuteCloudScript(
        request,
        PlayFab::UPlayFabClientAPI::FExecuteCloudScriptDelegate::CreateUObject(this, &APfTestActor::OnCloudUploadSuccess),
        PlayFab::FPlayFabErrorDelegate::CreateUObject(this, &APfTestActor::OnCloudUploadError)
    );
}

void APfTestActor::OnCloudUploadSuccess(const PlayFab::ClientModels::FExecuteCloudScriptResult& result) const
{
    //UE_LOG(LogPlayFabCpp, Log, TEXT("Cloud Upload Success: \n%s"), *result.toJSONString());
}

void APfTestActor::OnCloudUploadError(const PlayFab::FPlayFabCppError& error) const
{
    //UE_LOG(LogPlayFabCpp, Error, TEXT("Cloud Upload Error: \n%s"), *error.GenerateErrorReport());
}
