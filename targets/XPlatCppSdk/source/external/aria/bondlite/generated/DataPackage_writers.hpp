//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : bondjson2cpp 2016.12.18.1
//   File : DataPackage.json
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#pragma once
#include "BondConstTypes.hpp"

namespace bond_lite {

template<typename TWriter>
void Serialize(TWriter& writer, ::clienttelemetry::data::v3::ExceptionInfo const& value, bool isBase)
{
    writer.WriteStructBegin(nullptr, isBase);

    if (!value.Type.empty()) {
        writer.WriteFieldBegin(BT_STRING, 1, nullptr);
        writer.WriteString(value.Type);
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_STRING, 1, nullptr);
    }

    if (!value.Message.empty()) {
        writer.WriteFieldBegin(BT_STRING, 2, nullptr);
        writer.WriteString(value.Message);
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_STRING, 2, nullptr);
    }

    if (!value.FullInfo.empty()) {
        writer.WriteFieldBegin(BT_STRING, 3, nullptr);
        writer.WriteString(value.FullInfo);
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_STRING, 3, nullptr);
    }

    writer.WriteStructEnd(isBase);
}

template<typename TWriter>
void Serialize(TWriter& writer, ::clienttelemetry::data::v3::Pstn const& value, bool isBase)
{
    writer.WriteStructBegin(nullptr, isBase);

    if (!value.PstnNumber.empty()) {
        writer.WriteFieldBegin(BT_STRING, 1, nullptr);
        writer.WriteString(value.PstnNumber);
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_STRING, 1, nullptr);
    }

    if (!value.HashedPstn.empty()) {
        writer.WriteFieldBegin(BT_STRING, 2, nullptr);
        writer.WriteString(value.HashedPstn);
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_STRING, 2, nullptr);
    }

    writer.WriteStructEnd(isBase);
}

template<typename TWriter>
void Serialize(TWriter& writer, ::clienttelemetry::data::v3::Endpoint const& value, bool isBase)
{
    writer.WriteStructBegin(nullptr, isBase);

    if (!value.EndpointValue.empty()) {
        writer.WriteFieldBegin(BT_STRING, 1, nullptr);
        writer.WriteString(value.EndpointValue);
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_STRING, 1, nullptr);
    }

    if (!value.EndpointType.empty()) {
        writer.WriteFieldBegin(BT_STRING, 2, nullptr);
        writer.WriteString(value.EndpointType);
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_STRING, 2, nullptr);
    }

    if (!value.HashedEndpoint.empty()) {
        writer.WriteFieldBegin(BT_STRING, 3, nullptr);
        writer.WriteString(value.HashedEndpoint);
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_STRING, 3, nullptr);
    }

    writer.WriteStructEnd(isBase);
}

template<typename TWriter>
void Serialize(TWriter& writer, ::clienttelemetry::data::v3::User const& value, bool isBase)
{
    writer.WriteStructBegin(nullptr, isBase);

    if (!value.Username.empty()) {
        writer.WriteFieldBegin(BT_STRING, 1, nullptr);
        writer.WriteString(value.Username);
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_STRING, 1, nullptr);
    }

    if (!value.Prefix.empty()) {
        writer.WriteFieldBegin(BT_STRING, 2, nullptr);
        writer.WriteString(value.Prefix);
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_STRING, 2, nullptr);
    }

    if (!value.UiVersion.empty()) {
        writer.WriteFieldBegin(BT_STRING, 3, nullptr);
        writer.WriteString(value.UiVersion);
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_STRING, 3, nullptr);
    }

    if (!value.Endpoint.empty()) {
        writer.WriteFieldBegin(BT_STRING, 4, nullptr);
        writer.WriteString(value.Endpoint);
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_STRING, 4, nullptr);
    }

    if (!value.EndpointType.empty()) {
        writer.WriteFieldBegin(BT_STRING, 5, nullptr);
        writer.WriteString(value.EndpointType);
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_STRING, 5, nullptr);
    }

    writer.WriteFieldBegin(BT_STRUCT, 6, nullptr);
    Serialize(writer, value.Pstn, false);
    writer.WriteFieldEnd();

    writer.WriteFieldBegin(BT_STRUCT, 7, nullptr);
    Serialize(writer, value.EndpointComposite, false);
    writer.WriteFieldEnd();

    if (!value.UserExtension.empty()) {
        writer.WriteFieldBegin(BT_MAP, 8, nullptr);
        writer.WriteMapContainerBegin(value.UserExtension.size(), BT_STRING, BT_STRING);
        for (auto const& item2 : value.UserExtension) {
            writer.WriteString(item2.first);
            writer.WriteString(item2.second);
        }
        writer.WriteContainerEnd();
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_MAP, 8, nullptr);
    }

    if (!value.Email.empty()) {
        writer.WriteFieldBegin(BT_STRING, 9, nullptr);
        writer.WriteString(value.Email);
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_STRING, 9, nullptr);
    }

    writer.WriteStructEnd(isBase);
}

template<typename TWriter>
void Serialize(TWriter& writer, ::clienttelemetry::data::v3::UserV1 const& value, bool isBase)
{
    writer.WriteStructBegin(nullptr, isBase);

    if (!value.Username.empty()) {
        writer.WriteFieldBegin(BT_STRING, 1, nullptr);
        writer.WriteString(value.Username);
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_STRING, 1, nullptr);
    }

    if (!value.Prefix.empty()) {
        writer.WriteFieldBegin(BT_STRING, 2, nullptr);
        writer.WriteString(value.Prefix);
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_STRING, 2, nullptr);
    }

    if (!value.UiVersion.empty()) {
        writer.WriteFieldBegin(BT_STRING, 3, nullptr);
        writer.WriteString(value.UiVersion);
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_STRING, 3, nullptr);
    }

    if (!value.Endpoint.empty()) {
        writer.WriteFieldBegin(BT_STRING, 4, nullptr);
        writer.WriteString(value.Endpoint);
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_STRING, 4, nullptr);
    }

    if (!value.EndpointType.empty()) {
        writer.WriteFieldBegin(BT_STRING, 5, nullptr);
        writer.WriteString(value.EndpointType);
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_STRING, 5, nullptr);
    }

    writer.WriteFieldBegin(BT_STRUCT, 6, nullptr);
    Serialize(writer, value.Pstn, false);
    writer.WriteFieldEnd();

    writer.WriteFieldBegin(BT_STRUCT, 7, nullptr);
    Serialize(writer, value.EndpointComposite, false);
    writer.WriteFieldEnd();

    if (!value.UserExtension.empty()) {
        writer.WriteFieldBegin(BT_MAP, 8, nullptr);
        writer.WriteMapContainerBegin(value.UserExtension.size(), BT_STRING, BT_STRING);
        for (auto const& item2 : value.UserExtension) {
            writer.WriteString(item2.first);
            writer.WriteString(item2.second);
        }
        writer.WriteContainerEnd();
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_MAP, 8, nullptr);
    }

    writer.WriteStructEnd(isBase);
}

template<typename TWriter>
void Serialize(TWriter& writer, ::clienttelemetry::data::v3::Conference const& value, bool isBase)
{
    writer.WriteStructBegin(nullptr, isBase);

    if (!value.ConferenceUri.empty()) {
        writer.WriteFieldBegin(BT_STRING, 1, nullptr);
        writer.WriteString(value.ConferenceUri);
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_STRING, 1, nullptr);
    }

    if (!value.DomainName.empty()) {
        writer.WriteFieldBegin(BT_STRING, 2, nullptr);
        writer.WriteString(value.DomainName);
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_STRING, 2, nullptr);
    }

    if (!value.UriScheme.empty()) {
        writer.WriteFieldBegin(BT_STRING, 3, nullptr);
        writer.WriteString(value.UriScheme);
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_STRING, 3, nullptr);
    }

    writer.WriteStructEnd(isBase);
}

template<typename TWriter>
void Serialize(TWriter& writer, ::clienttelemetry::data::v3::PII const& value, bool isBase)
{
    writer.WriteStructBegin(nullptr, isBase);

    static_assert(sizeof(value.ScrubType) == 4, "Invalid size of enum");
    if (value.ScrubType != ::clienttelemetry::data::v3::PIIScrubber::NotSet) {
        writer.WriteFieldBegin(BT_INT32, 1, nullptr);
        writer.WriteInt32(static_cast<int32_t>(value.ScrubType));
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_INT32, 1, nullptr);
    }

    static_assert(sizeof(value.Kind) == 4, "Invalid size of enum");
    if (value.Kind != ::clienttelemetry::data::v3::PIIKind::NotSet) {
        writer.WriteFieldBegin(BT_INT32, 2, nullptr);
        writer.WriteInt32(static_cast<int32_t>(value.Kind));
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_INT32, 2, nullptr);
    }

    if (!value.RawContent.empty()) {
        writer.WriteFieldBegin(BT_STRING, 3, nullptr);
        writer.WriteString(value.RawContent);
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_STRING, 3, nullptr);
    }

    writer.WriteStructEnd(isBase);
}

template<typename TWriter>
void Serialize(TWriter& writer, ::clienttelemetry::data::v3::Record const& value, bool isBase)
{
    writer.WriteStructBegin(nullptr, isBase);

    if (!value.Id.empty()) {
        writer.WriteFieldBegin(BT_STRING, 1, nullptr);
        writer.WriteString(value.Id);
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_STRING, 1, nullptr);
    }

    if (!value.Context.empty()) {
        writer.WriteFieldBegin(BT_LIST, 2, nullptr);
        writer.WriteContainerBegin(value.Context.size(), BT_STRING);
        for (auto const& item2 : value.Context) {
            writer.WriteString(item2);
        }
        writer.WriteContainerEnd();
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_LIST, 2, nullptr);
    }

    if (value.Timestamp != 0) {
        writer.WriteFieldBegin(BT_INT64, 3, nullptr);
        writer.WriteInt64(value.Timestamp);
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_INT64, 3, nullptr);
    }

    if (!value.ConfigurationIds.empty()) {
        writer.WriteFieldBegin(BT_MAP, 4, nullptr);
        writer.WriteMapContainerBegin(value.ConfigurationIds.size(), BT_STRING, BT_STRING);
        for (auto const& item2 : value.ConfigurationIds) {
            writer.WriteString(item2.first);
            writer.WriteString(item2.second);
        }
        writer.WriteContainerEnd();
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_MAP, 4, nullptr);
    }

    if (!value.Type.empty()) {
        writer.WriteFieldBegin(BT_STRING, 5, nullptr);
        writer.WriteString(value.Type);
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_STRING, 5, nullptr);
    }

    if (!value.EventType.empty()) {
        writer.WriteFieldBegin(BT_STRING, 6, nullptr);
        writer.WriteString(value.EventType);
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_STRING, 6, nullptr);
    }

    if (value.ResultCode != 0) {
        writer.WriteFieldBegin(BT_INT32, 7, nullptr);
        writer.WriteInt32(value.ResultCode);
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_INT32, 7, nullptr);
    }

    if (!value.ResultDetail.empty()) {
        writer.WriteFieldBegin(BT_STRING, 8, nullptr);
        writer.WriteString(value.ResultDetail);
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_STRING, 8, nullptr);
    }

    if (!value.ResultValue.empty()) {
        writer.WriteFieldBegin(BT_STRING, 9, nullptr);
        writer.WriteString(value.ResultValue);
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_STRING, 9, nullptr);
    }

    if (!value.InitiatingUser.empty()) {
        writer.WriteFieldBegin(BT_STRING, 10, nullptr);
        writer.WriteString(value.InitiatingUser);
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_STRING, 10, nullptr);
    }

    if (!value.InitiatingUserEndpoint.empty()) {
        writer.WriteFieldBegin(BT_STRING, 11, nullptr);
        writer.WriteString(value.InitiatingUserEndpoint);
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_STRING, 11, nullptr);
    }

    if (!value.TargetUsers.empty()) {
        writer.WriteFieldBegin(BT_LIST, 12, nullptr);
        writer.WriteContainerBegin(value.TargetUsers.size(), BT_STRING);
        for (auto const& item2 : value.TargetUsers) {
            writer.WriteString(item2);
        }
        writer.WriteContainerEnd();
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_LIST, 12, nullptr);
    }

    if (!value.Extension.empty()) {
        writer.WriteFieldBegin(BT_MAP, 13, nullptr);
        writer.WriteMapContainerBegin(value.Extension.size(), BT_STRING, BT_STRING);
        for (auto const& item2 : value.Extension) {
            writer.WriteString(item2.first);
            writer.WriteString(item2.second);
        }
        writer.WriteContainerEnd();
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_MAP, 13, nullptr);
    }

    if (value.SampleTimestamp != 0) {
        writer.WriteFieldBegin(BT_INT64, 14, nullptr);
        writer.WriteInt64(value.SampleTimestamp);
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_INT64, 14, nullptr);
    }

    if (!value.SampleRate.empty()) {
        writer.WriteFieldBegin(BT_STRING, 15, nullptr);
        writer.WriteString(value.SampleRate);
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_STRING, 15, nullptr);
    }

    if (!value.SamplingData.empty()) {
        writer.WriteFieldBegin(BT_MAP, 16, nullptr);
        writer.WriteMapContainerBegin(value.SamplingData.size(), BT_STRING, BT_LIST);
        for (auto const& item2 : value.SamplingData) {
            writer.WriteString(item2.first);
            writer.WriteContainerBegin(item2.second.size(), BT_INT64);
            for (auto const& item3 : item2.second) {
                writer.WriteInt64(item3);
            }
            writer.WriteContainerEnd();
        }
        writer.WriteContainerEnd();
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_MAP, 16, nullptr);
    }

    if (!value.InitiatingUiVersion.empty()) {
        writer.WriteFieldBegin(BT_STRING, 17, nullptr);
        writer.WriteString(value.InitiatingUiVersion);
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_STRING, 17, nullptr);
    }

    if (!value.PstnNumbers.empty()) {
        writer.WriteFieldBegin(BT_MAP, 18, nullptr);
        writer.WriteMapContainerBegin(value.PstnNumbers.size(), BT_STRING, BT_STRING);
        for (auto const& item2 : value.PstnNumbers) {
            writer.WriteString(item2.first);
            writer.WriteString(item2.second);
        }
        writer.WriteContainerEnd();
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_MAP, 18, nullptr);
    }

    if (!value.ContextIds.empty()) {
        writer.WriteFieldBegin(BT_MAP, 19, nullptr);
        writer.WriteMapContainerBegin(value.ContextIds.size(), BT_STRING, BT_STRING);
        for (auto const& item2 : value.ContextIds) {
            writer.WriteString(item2.first);
            writer.WriteString(item2.second);
        }
        writer.WriteContainerEnd();
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_MAP, 19, nullptr);
    }

    if (!value.InitiatingUserEndpointType.empty()) {
        writer.WriteFieldBegin(BT_STRING, 20, nullptr);
        writer.WriteString(value.InitiatingUserEndpointType);
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_STRING, 20, nullptr);
    }

    writer.WriteFieldBegin(BT_STRUCT, 21, nullptr);
    Serialize(writer, value.DeprecatedInitiatingUserComposite, false);
    writer.WriteFieldEnd();

    if (!value.DeprecatedTargetUsersComposite.empty()) {
        writer.WriteFieldBegin(BT_LIST, 22, nullptr);
        writer.WriteContainerBegin(value.DeprecatedTargetUsersComposite.size(), BT_STRUCT);
        for (auto const& item2 : value.DeprecatedTargetUsersComposite) {
            Serialize(writer, item2, false);
        }
        writer.WriteContainerEnd();
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_LIST, 22, nullptr);
    }

    if (!value.PstnNumbersComposite.empty()) {
        writer.WriteFieldBegin(BT_MAP, 23, nullptr);
        writer.WriteMapContainerBegin(value.PstnNumbersComposite.size(), BT_STRING, BT_STRUCT);
        for (auto const& item2 : value.PstnNumbersComposite) {
            writer.WriteString(item2.first);
            Serialize(writer, item2.second, false);
        }
        writer.WriteContainerEnd();
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_MAP, 23, nullptr);
    }

    static_assert(sizeof(value.RecordType) == 4, "Invalid size of enum");
    if (value.RecordType != ::clienttelemetry::data::v3::RecordType::NotSet) {
        writer.WriteFieldBegin(BT_INT32, 24, nullptr);
        writer.WriteInt32(static_cast<int32_t>(value.RecordType));
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_INT32, 24, nullptr);
    }

    if (!value.ExtensionInt64.empty()) {
        writer.WriteFieldBegin(BT_MAP, 25, nullptr);
        writer.WriteMapContainerBegin(value.ExtensionInt64.size(), BT_STRING, BT_INT64);
        for (auto const& item2 : value.ExtensionInt64) {
            writer.WriteString(item2.first);
            writer.WriteInt64(item2.second);
        }
        writer.WriteContainerEnd();
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_MAP, 25, nullptr);
    }

    if (!value._reserved.empty()) {
        writer.WriteFieldBegin(BT_MAP, 26, nullptr);
        writer.WriteMapContainerBegin(value._reserved.size(), BT_STRING, BT_DOUBLE);
        for (auto const& item2 : value._reserved) {
            writer.WriteString(item2.first);
            writer.WriteDouble(item2.second);
        }
        writer.WriteContainerEnd();
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_MAP, 26, nullptr);
    }

    writer.WriteFieldBegin(BT_STRUCT, 28, nullptr);
    Serialize(writer, value.ConferenceComposite, false);
    writer.WriteFieldEnd();

    writer.WriteFieldBegin(BT_STRUCT, 29, nullptr);
    Serialize(writer, value.ExceptionInfo, false);
    writer.WriteFieldEnd();

    if (!value.PIIExtensions.empty()) {
        writer.WriteFieldBegin(BT_MAP, 30, nullptr);
        writer.WriteMapContainerBegin(value.PIIExtensions.size(), BT_STRING, BT_STRUCT);
        for (auto const& item2 : value.PIIExtensions) {
            writer.WriteString(item2.first);
            Serialize(writer, item2.second, false);
        }
        writer.WriteContainerEnd();
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_MAP, 30, nullptr);
    }

    writer.WriteFieldBegin(BT_STRUCT, 31, nullptr);
    Serialize(writer, value.InitiatingUserComposite, false);
    writer.WriteFieldEnd();

    if (!value.TargetUsersComposite.empty()) {
        writer.WriteFieldBegin(BT_LIST, 32, nullptr);
        writer.WriteContainerBegin(value.TargetUsersComposite.size(), BT_STRUCT);
        for (auto const& item2 : value.TargetUsersComposite) {
            Serialize(writer, item2, false);
        }
        writer.WriteContainerEnd();
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_LIST, 32, nullptr);
    }

    writer.WriteStructEnd(isBase);
}

template<typename TWriter>
void Serialize(TWriter& writer, ::clienttelemetry::data::v3::DataPackage const& value, bool isBase)
{
    writer.WriteStructBegin(nullptr, isBase);

    if (!value.Type.empty()) {
        writer.WriteFieldBegin(BT_STRING, 1, nullptr);
        writer.WriteString(value.Type);
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_STRING, 1, nullptr);
    }

    if (!value.Source.empty()) {
        writer.WriteFieldBegin(BT_STRING, 2, nullptr);
        writer.WriteString(value.Source);
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_STRING, 2, nullptr);
    }

    if (!value.Version.empty()) {
        writer.WriteFieldBegin(BT_STRING, 3, nullptr);
        writer.WriteString(value.Version);
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_STRING, 3, nullptr);
    }

    if (!value.Ids.empty()) {
        writer.WriteFieldBegin(BT_MAP, 4, nullptr);
        writer.WriteMapContainerBegin(value.Ids.size(), BT_STRING, BT_STRING);
        for (auto const& item2 : value.Ids) {
            writer.WriteString(item2.first);
            writer.WriteString(item2.second);
        }
        writer.WriteContainerEnd();
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_MAP, 4, nullptr);
    }

    if (!value.DataPackageId.empty()) {
        writer.WriteFieldBegin(BT_STRING, 5, nullptr);
        writer.WriteString(value.DataPackageId);
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_STRING, 5, nullptr);
    }

    if (value.Timestamp != 0) {
        writer.WriteFieldBegin(BT_INT64, 6, nullptr);
        writer.WriteInt64(value.Timestamp);
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_INT64, 6, nullptr);
    }

    if (value.SchemaVersion != 0) {
        writer.WriteFieldBegin(BT_INT32, 7, nullptr);
        writer.WriteInt32(value.SchemaVersion);
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_INT32, 7, nullptr);
    }

    if (!value.Records.empty()) {
        writer.WriteFieldBegin(BT_LIST, 8, nullptr);
        writer.WriteContainerBegin(value.Records.size(), BT_STRUCT);
        for (auto const& item2 : value.Records) {
            Serialize(writer, item2, false);
        }
        writer.WriteContainerEnd();
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_LIST, 8, nullptr);
    }

    if (!value.Receipts.empty()) {
        writer.WriteFieldBegin(BT_LIST, 9, nullptr);
        writer.WriteContainerBegin(value.Receipts.size(), BT_STRUCT);
        for (auto const& item2 : value.Receipts) {
            Serialize(writer, item2, false);
        }
        writer.WriteContainerEnd();
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_LIST, 9, nullptr);
    }

    writer.WriteStructEnd(isBase);
}

template<typename TWriter>
void Serialize(TWriter& writer, ::clienttelemetry::data::v3::ClientToCollectorRequest const& value, bool isBase)
{
    writer.WriteStructBegin(nullptr, isBase);

    if (!value.DataPackages.empty()) {
        writer.WriteFieldBegin(BT_LIST, 1, nullptr);
        writer.WriteContainerBegin(value.DataPackages.size(), BT_STRUCT);
        for (auto const& item2 : value.DataPackages) {
            Serialize(writer, item2, false);
        }
        writer.WriteContainerEnd();
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_LIST, 1, nullptr);
    }

    if (value.RequestRetryCount != 0) {
        writer.WriteFieldBegin(BT_INT32, 2, nullptr);
        writer.WriteInt32(value.RequestRetryCount);
        writer.WriteFieldEnd();
    } else {
        writer.WriteFieldOmitted(BT_INT32, 2, nullptr);
    }

    writer.WriteStructEnd(isBase);
}

} // namespace bond_lite
