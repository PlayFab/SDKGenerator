<%- copyright %>

#include "TestFramework/PlayFabTestRunner.h"

#include "TestFramework/PlayFabTestCase.h"
#include "TestFramework/PlayFabTestContext.h"

//#include "PlayFab/Public/IPlayFab.h"
//#include "PlayFabCpp/Public/PlayFab.h"
//#include "PlayFabCpp/Public/Core/PlayFabClientAPI.h"

#include "Misc/App.h"
#include "Runtime/Launch/Resources/Version.h"
#include "Kismet/GameplayStatics.h"

const int SUMMARY_INIT_BUFFER_SIZE = 10000;
const int TEST_TIMEOUT_SECONDS = 10;

UPlayFabTestRunner::UPlayFabTestRunner(const FObjectInitializer& ObjectInitializer)
{
}

FString IPlayFabTestRunner::GenerateTestSummary()
{
    OutputSummary.Empty(SUMMARY_INIT_BUFFER_SIZE); // Set the capacity to handle everything we're about to put into it

    FDateTime now = FDateTime::UtcNow();
    for (int i = 0; i < SuiteTests.Num(); i++)
    {
        if (OutputSummary.Len() != 0)
            OutputSummary += '\n';
        OutputSummary += SuiteTests[i]->GenerateTestSummary(now);
    }

    FString testCountLine = "\nTotal tests: ";
    testCountLine += FString::FromInt(numberOfTests);
    testCountLine += ", Passed: ";
    testCountLine += FString::FromInt(passedTests);
    testCountLine += ", Failed: ";
    testCountLine += FString::FromInt(failedTests);

    OutputSummary += testCountLine;

    int Day, Month, Year;
    now.GetDate(Year, Month, Day);

    OutputSummary += FString::Format(TEXT(". {0} {1}.{2}.{3}, {4}, {5}/{6}/{7}."),
                                     {
                                         FApp::GetEpicProductIdentifier(),
                                         ENGINE_MAJOR_VERSION,
                                         ENGINE_MINOR_VERSION,
                                         ENGINE_PATCH_VERSION,
                                         UGameplayStatics::GetPlatformName(),
                                         Month, Day, Year
                                     });

    return OutputSummary;
}

void IPlayFabTestRunner::AddTestCase(UPlayFabTestCase* InTestCase)
{
    if (SuiteState != PlayFabApiTestActiveState::PENDING)
        return;

    InTestCase->GetTests(SuiteTests);
}

void IPlayFabTestRunner::ManageTestCase(UPlayFabTestCase* InNewTestCase, UPlayFabTestCase* InCurrentTestCase)
{
    if (InNewTestCase != InCurrentTestCase)
    {
        if (IsValid(InNewTestCase))
            InNewTestCase->ClassTearDown();

        if (IsValid(InCurrentTestCase))
        {
            SuiteTestCase = InCurrentTestCase;
            SuiteTestCase->ClassSetUp();
        }
    }
}

void IPlayFabTestRunner::Run(const float InDeltaTime)
{
    if (SuiteState != PlayFabApiTestActiveState::PENDING)
        return;

    const auto Index = CurrentTestIndex;
    if (Index < SuiteTests.Num())
    {
        auto CurrentTestData = SuiteTests[Index];
        UPlayFabTestCase* CurrentTestCase = CurrentTestData->GetTestCase();

        ManageTestCase(SuiteTestCase, CurrentTestCase);

        if (CurrentTestData->activeState == PlayFabApiTestActiveState::PENDING
            && CurrentTestData->activeState != PlayFabApiTestActiveState::ACTIVE)
        {
            numberOfTests++;

            UE_LOG(LogPlayFabCommon, Log, TEXT("Starting test: %s"), *CurrentTestData->testName);

            CurrentTestCase->SetUp(CurrentTestData);
            CurrentTestData->activeState = PlayFabApiTestActiveState::ACTIVE;

            CurrentTestData->startTime = FDateTime::UtcNow();
            CurrentTestData->testFunc.Execute(CurrentTestData);
        }

        if (CurrentTestData->GetDurationInSeconds() > TEST_TIMEOUT_SECONDS)
        {
            CurrentTestData->EndTest(PlayFabApiTestFinishState::TIMEDOUT, TEXT("Timed Out"));
        }

        if (CurrentTestData->activeState == PlayFabApiTestActiveState::ACTIVE
            && CurrentTestData->activeState != PlayFabApiTestActiveState::COMPLETE)
        {
            CurrentTestCase->Tick(CurrentTestData);
        }
        else
        {
            switch (CurrentTestData->finishState)
            {
            case PlayFabApiTestFinishState::PASSED: passedTests++;
                break;
            case PlayFabApiTestFinishState::FAILED: failedTests++;
                break;
            default: break;
            }

            CurrentTestCase->TearDown(CurrentTestData);
            ++CurrentTestIndex;
        }

        SuiteTests[Index] = CurrentTestData;
    }
    else
    {
        ManageTestCase(nullptr, SuiteTestCase); // Cleanup

        SuiteState = PlayFabApiTestActiveState::COMPLETE;

        EmitCloudScriptResults();
    }
}

void IPlayFabTestRunner::EmitCloudScriptResults()
{
    // PlayFabClientPtr ClientAPI = IPlayFabModuleInterface::Get().GetClientAPI();

    //TArray<TSharedPtr<FJsonValue>> TestReport;
    //for (auto SuiteTest : SuiteTests)
    //{
    //    FString finishStateStr;
    //    switch (SuiteTest->finishState)
    //    {
    //    case PlayFabApiTestFinishState::PASSED: finishStateStr = TEXT("PASSED");
    //        break;
    //    case PlayFabApiTestFinishState::FAILED: finishStateStr = TEXT("FAILED");
    //        break;
    //    case PlayFabApiTestFinishState::SKIPPED: finishStateStr = TEXT("SKIPPED");
    //        break;
    //    case PlayFabApiTestFinishState::TIMEDOUT: finishStateStr = TEXT("TIMEDOUT");
    //        break;
    //    default: finishStateStr = TEXT("");
    //        break;
    //    }

    //    TSharedPtr<FJsonObject> JsonObject = MakeShareable(new FJsonObject());
    //    JsonObject->SetStringField(TEXT("classname"), IPlayFab::Get().getBuildIdentifier());
    //    JsonObject->SetStringField(TEXT("name"), SuiteTest->testName); // This test's name.
    //    JsonObject->SetNumberField(TEXT("time"), SuiteTest->GetDurationInSeconds()); // End time is invalid here... so cheating a bit.
    //    JsonObject->SetStringField(TEXT("message"), SuiteTest->testResultMsg);
    //    JsonObject->SetStringField(TEXT("failureText"), finishStateStr); // Those two should match.
    //    JsonObject->SetStringField(TEXT("finishState"), finishStateStr); //
    //    JsonObject->SetObjectField(TEXT("stacktrace"), nullptr);

    //    TestReport.Add(MakeShareable(new FJsonValueObject(JsonObject)));
    //}

    //TSharedPtr<FJsonObject> finalJson = MakeShareable(new FJsonObject());
    //finalJson->SetStringField(TEXT("customId"), ClientAPI->GetBuildIdentifier());
    //finalJson->SetArrayField(TEXT("testReport"), TestReport);

    //auto functionParameter = PlayFab::FJsonKeeper();
    //functionParameter.readFromValue(MakeShareable(new FJsonValueObject(finalJson)));

    //PlayFab::ClientModels::FExecuteCloudScriptRequest request;
    //request.FunctionName = TEXT("SaveTestData");
    //request.FunctionParameter = functionParameter;
    //request.GeneratePlayStreamEvent = true;

    //UE_LOG(LogPlayFabCommon, Log, TEXT("Request: \n%s"), *request.toJSONString());

    //ClientAPI->ExecuteCloudScript(
    //    request,
    //    PlayFab::UPlayFabClientAPI::FExecuteCloudScriptDelegate::CreateUObject(this, &IPlayFabTestRunner::OnCloudUploadSuccess),
    //    PlayFab::FPlayFabErrorDelegate::CreateUObject(this, &IPlayFabTestRunner::OnCloudUploadError)
    //);
}

//void IPlayFabTestRunner::OnCloudUploadSuccess(const PlayFab::ClientModels::FExecuteCloudScriptResult& result) const
//{
//    UE_LOG(LogPlayFabCommon, Log, TEXT("Cloud Upload Success: \n%s"), *result.toJSONString());
//}
//
//void IPlayFabTestRunner::OnCloudUploadError(const PlayFab::FPlayFabCppError& error) const
//{
//    UE_LOG(LogPlayFabCommon, Error, TEXT("Cloud Upload Error: \n%s"), *error.GenerateErrorReport());
//}
