// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!

#include "PlayFabPrivatePCH.h"
#include "Core/PlayFab<%- api.name %>DataModels.h"
#include "Core/PlayFabJsonHelpers.h"

using namespace PlayFab;
using namespace PlayFab::<%- api.name %>Models;


<% for(var i in datatypes) { var datatype = datatypes[i]; if(datatype.isenum) { %>
void PlayFab::<%- api.name %>Models::write<%- datatype.name %>EnumJSON(<%- datatype.name %> enumVal, JsonWriter& writer)
{
    switch(enumVal)
    {
        <% for(var i=0; i<datatype.enumvalues.length; i++) { var enumval = datatype.enumvalues[i] %>
        case <%- datatype.name %><%- enumval.name %>: writer->WriteValue(TEXT("<%- enumval.name %>")); break;<% } %>
    }
}

<%- api.name %>Models::<%- datatype.name %> PlayFab::<%- api.name %>Models::read<%- datatype.name %>FromValue(const TSharedPtr<FJsonValue>& value)
{
    static TMap<FString, <%- datatype.name %>> _<%- datatype.name %>Map;
    if (_<%- datatype.name %>Map.Num() == 0)
    {
        // Auto-generate the map on the first use
<% for(var i=0; i<datatype.enumvalues.length; i++) { var enumval = datatype.enumvalues[i] %>        _<%- datatype.name %>Map.Add(TEXT("<%- datatype.enumvalues[i].name %>"), <%- datatype.name %><%- datatype.enumvalues[i].name %>);
<% } %>
    } 

	if(value.IsValid())
	{
	    auto output = _<%- datatype.name %>Map.Find(value->AsString());
		if (output != nullptr)
			return *output;
	}


    return <%- datatype.name %><%- datatype.enumvalues[0].name %>; // Basically critical fail
}

<% } else { %>
PlayFab::<%- api.name %>Models::F<%- datatype.name %>::~F<%- datatype.name %>()
{
    <% for(var p in datatype.properties) { var property = datatype.properties[p];
    if(!property.collection && property.isclass && property.optional) { %>//if(<%- property.name %> != NULL) delete <%- property.name %>;
    <% } } %>
}

void PlayFab::<%- api.name %>Models::F<%- datatype.name %>::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();
    <% for(var p in datatype.properties) { var property = datatype.properties[p]; %>
    <%- getPropertySerializer(property, datatype) %>
	<% } %>
    
    writer->WriteObjectEnd();
}

bool PlayFab::<%- api.name %>Models::F<%- datatype.name %>::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
	bool HasSucceeded = true; 
	<%	for(var p in datatype.properties)
		{ 
			var property = datatype.properties[p];	%>
    <%- getPropertyDeserializer(property, datatype) %>
    <%	} %>
    
    return HasSucceeded;
}

<% } } %>


