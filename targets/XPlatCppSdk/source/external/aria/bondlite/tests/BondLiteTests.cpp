// Copyright (c) Microsoft. All rights reserved.

#include <gtest/gtest.h>
#include <gmock/gmock.h>
#include <bond_lite/All.hpp>
#if HAS_BOOST_AND_FULL_BOND
    #include <bond/core/bond.h>
    #include <bond-aria/DataPackage_types.h>
    #include <bond-aria/DataPackage_apply.h>
#else
    #include <DataPackage_types.hpp>
#endif
#include <DataPackage_writers.hpp>
#include <DataPackage_readers.hpp>
#include "FullDumpBinaryBlob.hpp"

//---

struct BondSerializerTestParam {
    char const* desc;
    void (* prepare)(::clienttelemetry::data::v3::ClientToCollectorRequest& r);
    uint8_t const* expectedData;
    size_t expectedSize;

    template<size_t TSize>
    BondSerializerTestParam(char const* desc, decltype(prepare) prepare, char const (&expected)[TSize])
      : desc(desc), prepare(prepare), expectedData(reinterpret_cast<uint8_t const*>(expected)), expectedSize(TSize - 1) {}
    uint8_t const* expectedBegin() const { return expectedData; }
    uint8_t const* expectedEnd() const { return expectedData + expectedSize; }
};

void PrintTo(BondSerializerTestParam const& value, ::std::ostream* os)
{
    *os << '"' << value.desc << '"';
}

class BondSerializerTests : public testing::TestWithParam<BondSerializerTestParam>
{
};

TEST_P(BondSerializerTests, Check)
{
    BondSerializerTestParam const& test = GetParam();

    FullDumpBinaryBlob expectedOutput;
    expectedOutput.assign(test.expectedBegin(), test.expectedEnd());

    clienttelemetry::data::v3::ClientToCollectorRequest record;
    test.prepare(record);

#if HAS_BOOST_AND_FULL_BOND
    FullDumpBinaryBlob fullBondOutput;
    try {
        bond::OutputBuffer output;
        bond::CompactBinaryWriter<bond::OutputBuffer> writer(output);
        bond::Serialize(record, writer);
        bond::blob buf = output.GetBuffer();
        fullBondOutput.assign(buf.begin(), buf.end());
    } catch (std::exception const& ex) {
        FAIL() << "Bond serialization failure: " << ex.what();
    }
    ASSERT_THAT(fullBondOutput, FullDumpBinaryEq(expectedOutput));
#endif

    FullDumpBinaryBlob liteBondOutput;
    {
        bond_lite::CompactBinaryProtocolWriter writer(liteBondOutput);
        bond_lite::Serialize(writer, record);
    }
    EXPECT_THAT(liteBondOutput, FullDumpBinaryEq(expectedOutput));

    clienttelemetry::data::v3::ClientToCollectorRequest record2;
    {
        bond_lite::CompactBinaryProtocolReader reader(liteBondOutput);
        EXPECT_THAT(bond_lite::Deserialize(reader, record2), true);
    }
    EXPECT_THAT(record2, record);
}

//---

// To avoid warnings about multi-char constants

static int32_t int32const(char const* input)
{
    return *reinterpret_cast<int32_t const*>(input);
}

static int64_t int64const(char const* input)
{
    return *reinterpret_cast<int64_t const*>(input);
}

//---

// *INDENT-OFF*

static BondSerializerTestParam const basicTests[] = {
    BondSerializerTestParam(
        "All empty",
        [](clienttelemetry::data::v3::ClientToCollectorRequest& r)
        {
        },
        "\x00"
    ),

    BondSerializerTestParam(
        "All fields set",
        [](clienttelemetry::data::v3::ClientToCollectorRequest& r)
        {
            r.DataPackages.resize(1);
            {
                auto& p = r.DataPackages.back();
                p.Type = "Type";
                p.Source = "Source";
                p.Version = "Version";
                p.Ids["Ids.Key"] = "Ids.Value";
                p.DataPackageId = "DataPackageId";
                p.Timestamp = int64const("DaPaTstm");
                p.SchemaVersion = int32const("SchV");

                p.Records.resize(1);
                {
                    auto& re = p.Records.back();
                    re.Id = "Id";
                    re.Context.push_back("Context.Item");
                    re.Timestamp = int64const("RecoTstm");
                    re.ConfigurationIds["ConfigurationIds.Key"] = "ConfigurationIds.Value";
                    re.Type = "Type";
                    re.EventType = "EventType";
                    re.ResultCode = int32const("ReCo");
                    re.ResultDetail = "ResultDetail";
                    re.ResultValue = "ResultValue";
                    re.InitiatingUser = "InitiatingUser";
                    re.InitiatingUserEndpoint = "InitiatingUserEndpoint";
                    re.TargetUsers.push_back("TargetUsers.Item");
                    re.Extension["Extension.Key"] = "Extension.Value";
                    re.SampleTimestamp = int64const("SampTstm");
                    re.SampleRate = "SampleRate";
                    re.SamplingData["SamplingData.Key"].push_back(int64const("SaDaValu"));
                    re.InitiatingUiVersion = "InitiatingUiVersion";
                    re.PstnNumbers["PstnNumbers.Key"] = "PstnNumbers.Value";
                    re.ContextIds["ContextIds.Key"] = "ContextIds.Value";
                    re.InitiatingUserEndpointType = "InitiatingUserEndpointType";

                    {
                        auto& diuc = re.DeprecatedInitiatingUserComposite;
                        diuc.Username = "DUC.Username";
                        diuc.Prefix = "DUC.Prefix";
                        diuc.UiVersion = "DUC.UiVersion";
                        diuc.Endpoint = "DUC.Endpoint";
                        diuc.EndpointType = "DUC.EndpointType";
                        diuc.Pstn.PstnNumber = "DUC.Pstn.PstnNumber";
                        diuc.Pstn.HashedPstn = "DUC.Pstn.HashedPstn";
                        diuc.EndpointComposite.EndpointValue = "DUC.EC.EndpointValue";
                        diuc.EndpointComposite.EndpointType = "DUC.EC.EndpointType";
                        diuc.EndpointComposite.HashedEndpoint = "DUC.EC.HashedEndpoint";
                        diuc.UserExtension["DUC.UserExtension.Key"] = "DUC.UserExtension.Value";
                    }

                    re.DeprecatedTargetUsersComposite.push_back(re.DeprecatedInitiatingUserComposite);

                    {
                        auto& pn = re.PstnNumbersComposite["PstnNumbersComposite.Key"];
                        pn.PstnNumber = "PstnNumbersComposite.Value.PstnNumber";
                        pn.HashedPstn = "PstnNumbersComposite.Value.HashedPstn";
                    }

                    re.RecordType = clienttelemetry::data::v3::RecordType::Event;
                    re.ExtensionInt64["ExtensionInt64.Key"] = int64const("Ex64Valu");
                    re._reserved["_reserved"] = 123.456;

                    {
                        auto& cc = re.ConferenceComposite;
                        cc.ConferenceUri = "CC.ConferenceUri";
                        cc.DomainName = "CC.DomainName";
                        cc.UriScheme = "CC.UriScheme";
                    }

                    {
                        auto& ei = re.ExceptionInfo;
                        ei.Type = "EI.Type";
                        ei.Message = "EI.Message";
                        ei.FullInfo = "EI.FullInfo";
                    }

                    {
                        auto& pe = re.PIIExtensions["PIIExtensions.Key"];
                        pe.ScrubType = clienttelemetry::data::v3::PIIScrubber::SkypeData;
                        pe.Kind = clienttelemetry::data::v3::PIIKind::GenericData;
                        pe.RawContent = "PIIExtensions.Value.RawContent";
                    }

                    {
                        auto& iuc = re.InitiatingUserComposite;
                        iuc.Username = "UC.Username";
                        iuc.Prefix = "UC.Prefix";
                        iuc.UiVersion = "UC.UiVersion";
                        iuc.Endpoint = "UC.Endpoint";
                        iuc.EndpointType = "UC.EndpointType";
                        iuc.Pstn.PstnNumber = "UC.Pstn.PstnNumber";
                        iuc.Pstn.HashedPstn = "UC.Pstn.HashedPstn";
                        iuc.EndpointComposite.EndpointValue = "UC.EC.EndpointValue";
                        iuc.EndpointComposite.EndpointType = "UC.EC.EndpointType";
                        iuc.EndpointComposite.HashedEndpoint = "UC.EC.HashedEndpoint";
                        iuc.UserExtension["UC.UserExtension.Key"] = "UC.UserExtension.Value";
                        iuc.Email = "UC.Email";
                    }

                    re.TargetUsersComposite.push_back(re.InitiatingUserComposite);
                }

                p.Receipts.push_back(p.Records[0]);
            }

            r.RequestRetryCount = int32const("Requ");
        },
        "\x2B\x0A\x01\x29\x04\x54\x79\x70\x65\x49\x06\x53\x6F\x75\x72\x63\x65\x69\x07\x56\x65\x72\x73\x69\x6F\x6E\x8D\x09\x09\x01\x07\x49"
        "\x64\x73\x2E\x4B\x65\x79\x09\x49\x64\x73\x2E\x56\x61\x6C\x75\x65\xA9\x0D\x44\x61\x74\x61\x50\x61\x63\x6B\x61\x67\x65\x49\x64\xD1"
        "\x06\x88\x85\x83\x95\x8C\xD5\xB9\xF4\xDA\x01\xD0\x07\xA6\x8D\xC3\xE6\x0A\xCB\x08\x0A\x01\x29\x02\x49\x64\x4B\x09\x01\x0C\x43\x6F"
        "\x6E\x74\x65\x78\x74\x2E\x49\x74\x65\x6D\x71\xA4\x95\x9B\xF6\x8D\xD5\xB9\xF4\xDA\x01\x8D\x09\x09\x01\x14\x43\x6F\x6E\x66\x69\x67"
        "\x75\x72\x61\x74\x69\x6F\x6E\x49\x64\x73\x2E\x4B\x65\x79\x16\x43\x6F\x6E\x66\x69\x67\x75\x72\x61\x74\x69\x6F\x6E\x49\x64\x73\x2E"
        "\x56\x61\x6C\x75\x65\xA9\x04\x54\x79\x70\x65\xC9\x06\x09\x45\x76\x65\x6E\x74\x54\x79\x70\x65\xD0\x07\xA4\x95\x9B\xF4\x0D\xC9\x08"
        "\x0C\x52\x65\x73\x75\x6C\x74\x44\x65\x74\x61\x69\x6C\xC9\x09\x0B\x52\x65\x73\x75\x6C\x74\x56\x61\x6C\x75\x65\xC9\x0A\x0E\x49\x6E"
        "\x69\x74\x69\x61\x74\x69\x6E\x67\x55\x73\x65\x72\xC9\x0B\x16\x49\x6E\x69\x74\x69\x61\x74\x69\x6E\x67\x55\x73\x65\x72\x45\x6E\x64"
        "\x70\x6F\x69\x6E\x74\xCB\x0C\x09\x01\x10\x54\x61\x72\x67\x65\x74\x55\x73\x65\x72\x73\x2E\x49\x74\x65\x6D\xCD\x0D\x09\x09\x01\x0D"
        "\x45\x78\x74\x65\x6E\x73\x69\x6F\x6E\x2E\x4B\x65\x79\x0F\x45\x78\x74\x65\x6E\x73\x69\x6F\x6E\x2E\x56\x61\x6C\x75\x65\xD1\x0E\xA6"
        "\x85\xEB\x86\x8E\xD5\xB9\xF4\xDA\x01\xC9\x0F\x0A\x53\x61\x6D\x70\x6C\x65\x52\x61\x74\x65\xCD\x10\x09\x0B\x01\x10\x53\x61\x6D\x70"
        "\x6C\x69\x6E\x67\x44\x61\x74\x61\x2E\x4B\x65\x79\x11\x01\xA6\x85\xA3\x94\xCC\xD5\xB0\xEC\xEA\x01\xC9\x11\x13\x49\x6E\x69\x74\x69"
        "\x61\x74\x69\x6E\x67\x55\x69\x56\x65\x72\x73\x69\x6F\x6E\xCD\x12\x09\x09\x01\x0F\x50\x73\x74\x6E\x4E\x75\x6D\x62\x65\x72\x73\x2E"
        "\x4B\x65\x79\x11\x50\x73\x74\x6E\x4E\x75\x6D\x62\x65\x72\x73\x2E\x56\x61\x6C\x75\x65\xCD\x13\x09\x09\x01\x0E\x43\x6F\x6E\x74\x65"
        "\x78\x74\x49\x64\x73\x2E\x4B\x65\x79\x10\x43\x6F\x6E\x74\x65\x78\x74\x49\x64\x73\x2E\x56\x61\x6C\x75\x65\xC9\x14\x1A\x49\x6E\x69"
        "\x74\x69\x61\x74\x69\x6E\x67\x55\x73\x65\x72\x45\x6E\x64\x70\x6F\x69\x6E\x74\x54\x79\x70\x65\xCA\x15\x29\x0C\x44\x55\x43\x2E\x55"
        "\x73\x65\x72\x6E\x61\x6D\x65\x49\x0A\x44\x55\x43\x2E\x50\x72\x65\x66\x69\x78\x69\x0D\x44\x55\x43\x2E\x55\x69\x56\x65\x72\x73\x69"
        "\x6F\x6E\x89\x0C\x44\x55\x43\x2E\x45\x6E\x64\x70\x6F\x69\x6E\x74\xA9\x10\x44\x55\x43\x2E\x45\x6E\x64\x70\x6F\x69\x6E\x74\x54\x79"
        "\x70\x65\xCA\x06\x29\x13\x44\x55\x43\x2E\x50\x73\x74\x6E\x2E\x50\x73\x74\x6E\x4E\x75\x6D\x62\x65\x72\x49\x13\x44\x55\x43\x2E\x50"
        "\x73\x74\x6E\x2E\x48\x61\x73\x68\x65\x64\x50\x73\x74\x6E\x00\xCA\x07\x29\x14\x44\x55\x43\x2E\x45\x43\x2E\x45\x6E\x64\x70\x6F\x69"
        "\x6E\x74\x56\x61\x6C\x75\x65\x49\x13\x44\x55\x43\x2E\x45\x43\x2E\x45\x6E\x64\x70\x6F\x69\x6E\x74\x54\x79\x70\x65\x69\x15\x44\x55"
        "\x43\x2E\x45\x43\x2E\x48\x61\x73\x68\x65\x64\x45\x6E\x64\x70\x6F\x69\x6E\x74\x00\xCD\x08\x09\x09\x01\x15\x44\x55\x43\x2E\x55\x73"
        "\x65\x72\x45\x78\x74\x65\x6E\x73\x69\x6F\x6E\x2E\x4B\x65\x79\x17\x44\x55\x43\x2E\x55\x73\x65\x72\x45\x78\x74\x65\x6E\x73\x69\x6F"
        "\x6E\x2E\x56\x61\x6C\x75\x65\x00\xCB\x16\x0A\x01\x29\x0C\x44\x55\x43\x2E\x55\x73\x65\x72\x6E\x61\x6D\x65\x49\x0A\x44\x55\x43\x2E"
        "\x50\x72\x65\x66\x69\x78\x69\x0D\x44\x55\x43\x2E\x55\x69\x56\x65\x72\x73\x69\x6F\x6E\x89\x0C\x44\x55\x43\x2E\x45\x6E\x64\x70\x6F"
        "\x69\x6E\x74\xA9\x10\x44\x55\x43\x2E\x45\x6E\x64\x70\x6F\x69\x6E\x74\x54\x79\x70\x65\xCA\x06\x29\x13\x44\x55\x43\x2E\x50\x73\x74"
        "\x6E\x2E\x50\x73\x74\x6E\x4E\x75\x6D\x62\x65\x72\x49\x13\x44\x55\x43\x2E\x50\x73\x74\x6E\x2E\x48\x61\x73\x68\x65\x64\x50\x73\x74"
        "\x6E\x00\xCA\x07\x29\x14\x44\x55\x43\x2E\x45\x43\x2E\x45\x6E\x64\x70\x6F\x69\x6E\x74\x56\x61\x6C\x75\x65\x49\x13\x44\x55\x43\x2E"
        "\x45\x43\x2E\x45\x6E\x64\x70\x6F\x69\x6E\x74\x54\x79\x70\x65\x69\x15\x44\x55\x43\x2E\x45\x43\x2E\x48\x61\x73\x68\x65\x64\x45\x6E"
        "\x64\x70\x6F\x69\x6E\x74\x00\xCD\x08\x09\x09\x01\x15\x44\x55\x43\x2E\x55\x73\x65\x72\x45\x78\x74\x65\x6E\x73\x69\x6F\x6E\x2E\x4B"
        "\x65\x79\x17\x44\x55\x43\x2E\x55\x73\x65\x72\x45\x78\x74\x65\x6E\x73\x69\x6F\x6E\x2E\x56\x61\x6C\x75\x65\x00\xCD\x17\x09\x0A\x01"
        "\x18\x50\x73\x74\x6E\x4E\x75\x6D\x62\x65\x72\x73\x43\x6F\x6D\x70\x6F\x73\x69\x74\x65\x2E\x4B\x65\x79\x29\x25\x50\x73\x74\x6E\x4E"
        "\x75\x6D\x62\x65\x72\x73\x43\x6F\x6D\x70\x6F\x73\x69\x74\x65\x2E\x56\x61\x6C\x75\x65\x2E\x50\x73\x74\x6E\x4E\x75\x6D\x62\x65\x72"
        "\x49\x25\x50\x73\x74\x6E\x4E\x75\x6D\x62\x65\x72\x73\x43\x6F\x6D\x70\x6F\x73\x69\x74\x65\x2E\x56\x61\x6C\x75\x65\x2E\x48\x61\x73"
        "\x68\x65\x64\x50\x73\x74\x6E\x00\xD0\x18\x02\xCD\x19\x09\x11\x01\x12\x45\x78\x74\x65\x6E\x73\x69\x6F\x6E\x49\x6E\x74\x36\x34\x2E"
        "\x4B\x65\x79\x8A\xE1\xB3\xC3\xC6\xD5\xB0\xEC\xEA\x01\xCD\x1A\x09\x08\x01\x09\x5F\x72\x65\x73\x65\x72\x76\x65\x64\x77\xBE\x9F\x1A"
        "\x2F\xDD\x5E\x40\xCA\x1C\x29\x10\x43\x43\x2E\x43\x6F\x6E\x66\x65\x72\x65\x6E\x63\x65\x55\x72\x69\x49\x0D\x43\x43\x2E\x44\x6F\x6D"
        "\x61\x69\x6E\x4E\x61\x6D\x65\x69\x0C\x43\x43\x2E\x55\x72\x69\x53\x63\x68\x65\x6D\x65\x00\xCA\x1D\x29\x07\x45\x49\x2E\x54\x79\x70"
        "\x65\x49\x0A\x45\x49\x2E\x4D\x65\x73\x73\x61\x67\x65\x69\x0B\x45\x49\x2E\x46\x75\x6C\x6C\x49\x6E\x66\x6F\x00\xCD\x1E\x09\x0A\x01"
        "\x11\x50\x49\x49\x45\x78\x74\x65\x6E\x73\x69\x6F\x6E\x73\x2E\x4B\x65\x79\x30\x06\x50\x04\x69\x1E\x50\x49\x49\x45\x78\x74\x65\x6E"
        "\x73\x69\x6F\x6E\x73\x2E\x56\x61\x6C\x75\x65\x2E\x52\x61\x77\x43\x6F\x6E\x74\x65\x6E\x74\x00\xCA\x1F\x29\x0B\x55\x43\x2E\x55\x73"
        "\x65\x72\x6E\x61\x6D\x65\x49\x09\x55\x43\x2E\x50\x72\x65\x66\x69\x78\x69\x0C\x55\x43\x2E\x55\x69\x56\x65\x72\x73\x69\x6F\x6E\x89"
        "\x0B\x55\x43\x2E\x45\x6E\x64\x70\x6F\x69\x6E\x74\xA9\x0F\x55\x43\x2E\x45\x6E\x64\x70\x6F\x69\x6E\x74\x54\x79\x70\x65\xCA\x06\x29"
        "\x12\x55\x43\x2E\x50\x73\x74\x6E\x2E\x50\x73\x74\x6E\x4E\x75\x6D\x62\x65\x72\x49\x12\x55\x43\x2E\x50\x73\x74\x6E\x2E\x48\x61\x73"
        "\x68\x65\x64\x50\x73\x74\x6E\x00\xCA\x07\x29\x13\x55\x43\x2E\x45\x43\x2E\x45\x6E\x64\x70\x6F\x69\x6E\x74\x56\x61\x6C\x75\x65\x49"
        "\x12\x55\x43\x2E\x45\x43\x2E\x45\x6E\x64\x70\x6F\x69\x6E\x74\x54\x79\x70\x65\x69\x14\x55\x43\x2E\x45\x43\x2E\x48\x61\x73\x68\x65"
        "\x64\x45\x6E\x64\x70\x6F\x69\x6E\x74\x00\xCD\x08\x09\x09\x01\x14\x55\x43\x2E\x55\x73\x65\x72\x45\x78\x74\x65\x6E\x73\x69\x6F\x6E"
        "\x2E\x4B\x65\x79\x16\x55\x43\x2E\x55\x73\x65\x72\x45\x78\x74\x65\x6E\x73\x69\x6F\x6E\x2E\x56\x61\x6C\x75\x65\xC9\x09\x08\x55\x43"
        "\x2E\x45\x6D\x61\x69\x6C\x00\xCB\x20\x0A\x01\x29\x0B\x55\x43\x2E\x55\x73\x65\x72\x6E\x61\x6D\x65\x49\x09\x55\x43\x2E\x50\x72\x65"
        "\x66\x69\x78\x69\x0C\x55\x43\x2E\x55\x69\x56\x65\x72\x73\x69\x6F\x6E\x89\x0B\x55\x43\x2E\x45\x6E\x64\x70\x6F\x69\x6E\x74\xA9\x0F"
        "\x55\x43\x2E\x45\x6E\x64\x70\x6F\x69\x6E\x74\x54\x79\x70\x65\xCA\x06\x29\x12\x55\x43\x2E\x50\x73\x74\x6E\x2E\x50\x73\x74\x6E\x4E"
        "\x75\x6D\x62\x65\x72\x49\x12\x55\x43\x2E\x50\x73\x74\x6E\x2E\x48\x61\x73\x68\x65\x64\x50\x73\x74\x6E\x00\xCA\x07\x29\x13\x55\x43"
        "\x2E\x45\x43\x2E\x45\x6E\x64\x70\x6F\x69\x6E\x74\x56\x61\x6C\x75\x65\x49\x12\x55\x43\x2E\x45\x43\x2E\x45\x6E\x64\x70\x6F\x69\x6E"
        "\x74\x54\x79\x70\x65\x69\x14\x55\x43\x2E\x45\x43\x2E\x48\x61\x73\x68\x65\x64\x45\x6E\x64\x70\x6F\x69\x6E\x74\x00\xCD\x08\x09\x09"
        "\x01\x14\x55\x43\x2E\x55\x73\x65\x72\x45\x78\x74\x65\x6E\x73\x69\x6F\x6E\x2E\x4B\x65\x79\x16\x55\x43\x2E\x55\x73\x65\x72\x45\x78"
        "\x74\x65\x6E\x73\x69\x6F\x6E\x2E\x56\x61\x6C\x75\x65\xC9\x09\x08\x55\x43\x2E\x45\x6D\x61\x69\x6C\x00\x00\xCB\x09\x0A\x01\x29\x02"
        "\x49\x64\x4B\x09\x01\x0C\x43\x6F\x6E\x74\x65\x78\x74\x2E\x49\x74\x65\x6D\x71\xA4\x95\x9B\xF6\x8D\xD5\xB9\xF4\xDA\x01\x8D\x09\x09"
        "\x01\x14\x43\x6F\x6E\x66\x69\x67\x75\x72\x61\x74\x69\x6F\x6E\x49\x64\x73\x2E\x4B\x65\x79\x16\x43\x6F\x6E\x66\x69\x67\x75\x72\x61"
        "\x74\x69\x6F\x6E\x49\x64\x73\x2E\x56\x61\x6C\x75\x65\xA9\x04\x54\x79\x70\x65\xC9\x06\x09\x45\x76\x65\x6E\x74\x54\x79\x70\x65\xD0"
        "\x07\xA4\x95\x9B\xF4\x0D\xC9\x08\x0C\x52\x65\x73\x75\x6C\x74\x44\x65\x74\x61\x69\x6C\xC9\x09\x0B\x52\x65\x73\x75\x6C\x74\x56\x61"
        "\x6C\x75\x65\xC9\x0A\x0E\x49\x6E\x69\x74\x69\x61\x74\x69\x6E\x67\x55\x73\x65\x72\xC9\x0B\x16\x49\x6E\x69\x74\x69\x61\x74\x69\x6E"
        "\x67\x55\x73\x65\x72\x45\x6E\x64\x70\x6F\x69\x6E\x74\xCB\x0C\x09\x01\x10\x54\x61\x72\x67\x65\x74\x55\x73\x65\x72\x73\x2E\x49\x74"
        "\x65\x6D\xCD\x0D\x09\x09\x01\x0D\x45\x78\x74\x65\x6E\x73\x69\x6F\x6E\x2E\x4B\x65\x79\x0F\x45\x78\x74\x65\x6E\x73\x69\x6F\x6E\x2E"
        "\x56\x61\x6C\x75\x65\xD1\x0E\xA6\x85\xEB\x86\x8E\xD5\xB9\xF4\xDA\x01\xC9\x0F\x0A\x53\x61\x6D\x70\x6C\x65\x52\x61\x74\x65\xCD\x10"
        "\x09\x0B\x01\x10\x53\x61\x6D\x70\x6C\x69\x6E\x67\x44\x61\x74\x61\x2E\x4B\x65\x79\x11\x01\xA6\x85\xA3\x94\xCC\xD5\xB0\xEC\xEA\x01"
        "\xC9\x11\x13\x49\x6E\x69\x74\x69\x61\x74\x69\x6E\x67\x55\x69\x56\x65\x72\x73\x69\x6F\x6E\xCD\x12\x09\x09\x01\x0F\x50\x73\x74\x6E"
        "\x4E\x75\x6D\x62\x65\x72\x73\x2E\x4B\x65\x79\x11\x50\x73\x74\x6E\x4E\x75\x6D\x62\x65\x72\x73\x2E\x56\x61\x6C\x75\x65\xCD\x13\x09"
        "\x09\x01\x0E\x43\x6F\x6E\x74\x65\x78\x74\x49\x64\x73\x2E\x4B\x65\x79\x10\x43\x6F\x6E\x74\x65\x78\x74\x49\x64\x73\x2E\x56\x61\x6C"
        "\x75\x65\xC9\x14\x1A\x49\x6E\x69\x74\x69\x61\x74\x69\x6E\x67\x55\x73\x65\x72\x45\x6E\x64\x70\x6F\x69\x6E\x74\x54\x79\x70\x65\xCA"
        "\x15\x29\x0C\x44\x55\x43\x2E\x55\x73\x65\x72\x6E\x61\x6D\x65\x49\x0A\x44\x55\x43\x2E\x50\x72\x65\x66\x69\x78\x69\x0D\x44\x55\x43"
        "\x2E\x55\x69\x56\x65\x72\x73\x69\x6F\x6E\x89\x0C\x44\x55\x43\x2E\x45\x6E\x64\x70\x6F\x69\x6E\x74\xA9\x10\x44\x55\x43\x2E\x45\x6E"
        "\x64\x70\x6F\x69\x6E\x74\x54\x79\x70\x65\xCA\x06\x29\x13\x44\x55\x43\x2E\x50\x73\x74\x6E\x2E\x50\x73\x74\x6E\x4E\x75\x6D\x62\x65"
        "\x72\x49\x13\x44\x55\x43\x2E\x50\x73\x74\x6E\x2E\x48\x61\x73\x68\x65\x64\x50\x73\x74\x6E\x00\xCA\x07\x29\x14\x44\x55\x43\x2E\x45"
        "\x43\x2E\x45\x6E\x64\x70\x6F\x69\x6E\x74\x56\x61\x6C\x75\x65\x49\x13\x44\x55\x43\x2E\x45\x43\x2E\x45\x6E\x64\x70\x6F\x69\x6E\x74"
        "\x54\x79\x70\x65\x69\x15\x44\x55\x43\x2E\x45\x43\x2E\x48\x61\x73\x68\x65\x64\x45\x6E\x64\x70\x6F\x69\x6E\x74\x00\xCD\x08\x09\x09"
        "\x01\x15\x44\x55\x43\x2E\x55\x73\x65\x72\x45\x78\x74\x65\x6E\x73\x69\x6F\x6E\x2E\x4B\x65\x79\x17\x44\x55\x43\x2E\x55\x73\x65\x72"
        "\x45\x78\x74\x65\x6E\x73\x69\x6F\x6E\x2E\x56\x61\x6C\x75\x65\x00\xCB\x16\x0A\x01\x29\x0C\x44\x55\x43\x2E\x55\x73\x65\x72\x6E\x61"
        "\x6D\x65\x49\x0A\x44\x55\x43\x2E\x50\x72\x65\x66\x69\x78\x69\x0D\x44\x55\x43\x2E\x55\x69\x56\x65\x72\x73\x69\x6F\x6E\x89\x0C\x44"
        "\x55\x43\x2E\x45\x6E\x64\x70\x6F\x69\x6E\x74\xA9\x10\x44\x55\x43\x2E\x45\x6E\x64\x70\x6F\x69\x6E\x74\x54\x79\x70\x65\xCA\x06\x29"
        "\x13\x44\x55\x43\x2E\x50\x73\x74\x6E\x2E\x50\x73\x74\x6E\x4E\x75\x6D\x62\x65\x72\x49\x13\x44\x55\x43\x2E\x50\x73\x74\x6E\x2E\x48"
        "\x61\x73\x68\x65\x64\x50\x73\x74\x6E\x00\xCA\x07\x29\x14\x44\x55\x43\x2E\x45\x43\x2E\x45\x6E\x64\x70\x6F\x69\x6E\x74\x56\x61\x6C"
        "\x75\x65\x49\x13\x44\x55\x43\x2E\x45\x43\x2E\x45\x6E\x64\x70\x6F\x69\x6E\x74\x54\x79\x70\x65\x69\x15\x44\x55\x43\x2E\x45\x43\x2E"
        "\x48\x61\x73\x68\x65\x64\x45\x6E\x64\x70\x6F\x69\x6E\x74\x00\xCD\x08\x09\x09\x01\x15\x44\x55\x43\x2E\x55\x73\x65\x72\x45\x78\x74"
        "\x65\x6E\x73\x69\x6F\x6E\x2E\x4B\x65\x79\x17\x44\x55\x43\x2E\x55\x73\x65\x72\x45\x78\x74\x65\x6E\x73\x69\x6F\x6E\x2E\x56\x61\x6C"
        "\x75\x65\x00\xCD\x17\x09\x0A\x01\x18\x50\x73\x74\x6E\x4E\x75\x6D\x62\x65\x72\x73\x43\x6F\x6D\x70\x6F\x73\x69\x74\x65\x2E\x4B\x65"
        "\x79\x29\x25\x50\x73\x74\x6E\x4E\x75\x6D\x62\x65\x72\x73\x43\x6F\x6D\x70\x6F\x73\x69\x74\x65\x2E\x56\x61\x6C\x75\x65\x2E\x50\x73"
        "\x74\x6E\x4E\x75\x6D\x62\x65\x72\x49\x25\x50\x73\x74\x6E\x4E\x75\x6D\x62\x65\x72\x73\x43\x6F\x6D\x70\x6F\x73\x69\x74\x65\x2E\x56"
        "\x61\x6C\x75\x65\x2E\x48\x61\x73\x68\x65\x64\x50\x73\x74\x6E\x00\xD0\x18\x02\xCD\x19\x09\x11\x01\x12\x45\x78\x74\x65\x6E\x73\x69"
        "\x6F\x6E\x49\x6E\x74\x36\x34\x2E\x4B\x65\x79\x8A\xE1\xB3\xC3\xC6\xD5\xB0\xEC\xEA\x01\xCD\x1A\x09\x08\x01\x09\x5F\x72\x65\x73\x65"
        "\x72\x76\x65\x64\x77\xBE\x9F\x1A\x2F\xDD\x5E\x40\xCA\x1C\x29\x10\x43\x43\x2E\x43\x6F\x6E\x66\x65\x72\x65\x6E\x63\x65\x55\x72\x69"
        "\x49\x0D\x43\x43\x2E\x44\x6F\x6D\x61\x69\x6E\x4E\x61\x6D\x65\x69\x0C\x43\x43\x2E\x55\x72\x69\x53\x63\x68\x65\x6D\x65\x00\xCA\x1D"
        "\x29\x07\x45\x49\x2E\x54\x79\x70\x65\x49\x0A\x45\x49\x2E\x4D\x65\x73\x73\x61\x67\x65\x69\x0B\x45\x49\x2E\x46\x75\x6C\x6C\x49\x6E"
        "\x66\x6F\x00\xCD\x1E\x09\x0A\x01\x11\x50\x49\x49\x45\x78\x74\x65\x6E\x73\x69\x6F\x6E\x73\x2E\x4B\x65\x79\x30\x06\x50\x04\x69\x1E"
        "\x50\x49\x49\x45\x78\x74\x65\x6E\x73\x69\x6F\x6E\x73\x2E\x56\x61\x6C\x75\x65\x2E\x52\x61\x77\x43\x6F\x6E\x74\x65\x6E\x74\x00\xCA"
        "\x1F\x29\x0B\x55\x43\x2E\x55\x73\x65\x72\x6E\x61\x6D\x65\x49\x09\x55\x43\x2E\x50\x72\x65\x66\x69\x78\x69\x0C\x55\x43\x2E\x55\x69"
        "\x56\x65\x72\x73\x69\x6F\x6E\x89\x0B\x55\x43\x2E\x45\x6E\x64\x70\x6F\x69\x6E\x74\xA9\x0F\x55\x43\x2E\x45\x6E\x64\x70\x6F\x69\x6E"
        "\x74\x54\x79\x70\x65\xCA\x06\x29\x12\x55\x43\x2E\x50\x73\x74\x6E\x2E\x50\x73\x74\x6E\x4E\x75\x6D\x62\x65\x72\x49\x12\x55\x43\x2E"
        "\x50\x73\x74\x6E\x2E\x48\x61\x73\x68\x65\x64\x50\x73\x74\x6E\x00\xCA\x07\x29\x13\x55\x43\x2E\x45\x43\x2E\x45\x6E\x64\x70\x6F\x69"
        "\x6E\x74\x56\x61\x6C\x75\x65\x49\x12\x55\x43\x2E\x45\x43\x2E\x45\x6E\x64\x70\x6F\x69\x6E\x74\x54\x79\x70\x65\x69\x14\x55\x43\x2E"
        "\x45\x43\x2E\x48\x61\x73\x68\x65\x64\x45\x6E\x64\x70\x6F\x69\x6E\x74\x00\xCD\x08\x09\x09\x01\x14\x55\x43\x2E\x55\x73\x65\x72\x45"
        "\x78\x74\x65\x6E\x73\x69\x6F\x6E\x2E\x4B\x65\x79\x16\x55\x43\x2E\x55\x73\x65\x72\x45\x78\x74\x65\x6E\x73\x69\x6F\x6E\x2E\x56\x61"
        "\x6C\x75\x65\xC9\x09\x08\x55\x43\x2E\x45\x6D\x61\x69\x6C\x00\xCB\x20\x0A\x01\x29\x0B\x55\x43\x2E\x55\x73\x65\x72\x6E\x61\x6D\x65"
        "\x49\x09\x55\x43\x2E\x50\x72\x65\x66\x69\x78\x69\x0C\x55\x43\x2E\x55\x69\x56\x65\x72\x73\x69\x6F\x6E\x89\x0B\x55\x43\x2E\x45\x6E"
        "\x64\x70\x6F\x69\x6E\x74\xA9\x0F\x55\x43\x2E\x45\x6E\x64\x70\x6F\x69\x6E\x74\x54\x79\x70\x65\xCA\x06\x29\x12\x55\x43\x2E\x50\x73"
        "\x74\x6E\x2E\x50\x73\x74\x6E\x4E\x75\x6D\x62\x65\x72\x49\x12\x55\x43\x2E\x50\x73\x74\x6E\x2E\x48\x61\x73\x68\x65\x64\x50\x73\x74"
        "\x6E\x00\xCA\x07\x29\x13\x55\x43\x2E\x45\x43\x2E\x45\x6E\x64\x70\x6F\x69\x6E\x74\x56\x61\x6C\x75\x65\x49\x12\x55\x43\x2E\x45\x43"
        "\x2E\x45\x6E\x64\x70\x6F\x69\x6E\x74\x54\x79\x70\x65\x69\x14\x55\x43\x2E\x45\x43\x2E\x48\x61\x73\x68\x65\x64\x45\x6E\x64\x70\x6F"
        "\x69\x6E\x74\x00\xCD\x08\x09\x09\x01\x14\x55\x43\x2E\x55\x73\x65\x72\x45\x78\x74\x65\x6E\x73\x69\x6F\x6E\x2E\x4B\x65\x79\x16\x55"
        "\x43\x2E\x55\x73\x65\x72\x45\x78\x74\x65\x6E\x73\x69\x6F\x6E\x2E\x56\x61\x6C\x75\x65\xC9\x09\x08\x55\x43\x2E\x45\x6D\x61\x69\x6C"
        "\x00\x00\x00\x50\xA4\x95\x8B\xD7\x0E\x00"
    ),

    BondSerializerTestParam(
        "Containers with multiple items",
        [](clienttelemetry::data::v3::ClientToCollectorRequest& r)
        {
            r.DataPackages.resize(2);

            {
                auto& p = r.DataPackages[0];
                p.Ids["0"] = "A";
                p.Ids["1"] = "B";

                p.Records.resize(2);

                {
                    auto& re = p.Records[0];
                    re.Context.push_back("First");
                    re.Context.push_back("Second");
                    re.ConfigurationIds["A"] = "0";
                    re.ConfigurationIds["B"] = "1";
                    re.TargetUsers.push_back("One");
                    re.TargetUsers.push_back("Two");
                    re.Extension["EA"] = "VA";
                    re.Extension["EB"] = "VB";
                    re.SamplingData["SA"].push_back(int32const("SAVX"));
                    re.SamplingData["SB"].push_back(int32const("SBVY"));
                    re.PstnNumbers["PA"] = "V0";
                    re.PstnNumbers["PB"] = "V1";
                    re.ContextIds["CA"] = "V1";
                    re.ContextIds["CB"] = "V2";
                    re.DeprecatedInitiatingUserComposite.UserExtension["D0"] = "Zero";
                    re.DeprecatedInitiatingUserComposite.UserExtension["D1"] = "One";
                    re.DeprecatedTargetUsersComposite.push_back(re.DeprecatedInitiatingUserComposite);
                    re.DeprecatedTargetUsersComposite.push_back(re.DeprecatedInitiatingUserComposite);
                    re.PstnNumbersComposite["NA"].PstnNumber = "11";
                    re.PstnNumbersComposite["NB"].PstnNumber = "22";
                    re.ExtensionInt64["I64A"] = int32const("I64A");
                    re.ExtensionInt64["I64B"] = int32const("I64B");
                    re._reserved["RA"] = 1.0;
                    re._reserved["RB"] = 2.0;
                    re.PIIExtensions["IA"].Kind = clienttelemetry::data::v3::PIIKind::IPV4Address;
                    re.PIIExtensions["IB"].Kind = clienttelemetry::data::v3::PIIKind::IPv6Address;
                    re.InitiatingUserComposite.UserExtension["UA"] = "Uno";
                    re.InitiatingUserComposite.UserExtension["UB"] = "Dos";
                    re.TargetUsersComposite.push_back(re.InitiatingUserComposite);
                    re.TargetUsersComposite.push_back(re.InitiatingUserComposite);
                }

                {
                    auto& re = p.Records[1];
                    re.Context.push_back("Third");
                    re.Context.push_back("Four");
                }

                p.Receipts.push_back(p.Records[1]);
                p.Receipts.push_back(p.Records[0]);
            }

            {
                auto& p = r.DataPackages[1];
                p.Ids["2"] = "C";
                p.Ids["3"] = "D";

                p.Receipts.resize(1);

                {
                    auto& re = p.Receipts[0];
                    re.InitiatingUserComposite.UserExtension["U0"] = "A";
                    re.InitiatingUserComposite.UserExtension["U1"] = "B";
                }
            }
        },
        "\x2B\x0A\x02\x8D\x09\x09\x02\x01\x30\x01\x41\x01\x31\x01\x42\xCB\x08\x0A\x02\x4B\x09\x02\x05\x46\x69\x72\x73\x74\x06\x53\x65\x63"
        "\x6F\x6E\x64\x8D\x09\x09\x02\x01\x41\x01\x30\x01\x42\x01\x31\xCB\x0C\x09\x02\x03\x4F\x6E\x65\x03\x54\x77\x6F\xCD\x0D\x09\x09\x02"
        "\x02\x45\x41\x02\x56\x41\x02\x45\x42\x02\x56\x42\xCD\x10\x09\x0B\x02\x02\x53\x41\x11\x01\xA6\x85\xB2\x85\x0B\x02\x53\x42\x11\x01"
        "\xA6\x89\xB2\x95\x0B\xCD\x12\x09\x09\x02\x02\x50\x41\x02\x56\x30\x02\x50\x42\x02\x56\x31\xCD\x13\x09\x09\x02\x02\x43\x41\x02\x56"
        "\x31\x02\x43\x42\x02\x56\x32\xCA\x15\xCA\x06\x00\xCA\x07\x00\xCD\x08\x09\x09\x02\x02\x44\x30\x04\x5A\x65\x72\x6F\x02\x44\x31\x03"
        "\x4F\x6E\x65\x00\xCB\x16\x0A\x02\xCA\x06\x00\xCA\x07\x00\xCD\x08\x09\x09\x02\x02\x44\x30\x04\x5A\x65\x72\x6F\x02\x44\x31\x03\x4F"
        "\x6E\x65\x00\xCA\x06\x00\xCA\x07\x00\xCD\x08\x09\x09\x02\x02\x44\x30\x04\x5A\x65\x72\x6F\x02\x44\x31\x03\x4F\x6E\x65\x00\xCD\x17"
        "\x09\x0A\x02\x02\x4E\x41\x29\x02\x31\x31\x00\x02\x4E\x42\x29\x02\x32\x32\x00\xCD\x19\x09\x11\x02\x04\x49\x36\x34\x41\x92\xD9\xA1"
        "\x93\x08\x04\x49\x36\x34\x42\x92\xD9\xA1\xA3\x08\xCD\x1A\x09\x08\x02\x02\x52\x41\x00\x00\x00\x00\x00\x00\xF0\x3F\x02\x52\x42\x00"
        "\x00\x00\x00\x00\x00\x00\x40\xCA\x1C\x00\xCA\x1D\x00\xCD\x1E\x09\x0A\x02\x02\x49\x41\x50\x06\x00\x02\x49\x42\x50\x08\x00\xCA\x1F"
        "\xCA\x06\x00\xCA\x07\x00\xCD\x08\x09\x09\x02\x02\x55\x41\x03\x55\x6E\x6F\x02\x55\x42\x03\x44\x6F\x73\x00\xCB\x20\x0A\x02\xCA\x06"
        "\x00\xCA\x07\x00\xCD\x08\x09\x09\x02\x02\x55\x41\x03\x55\x6E\x6F\x02\x55\x42\x03\x44\x6F\x73\x00\xCA\x06\x00\xCA\x07\x00\xCD\x08"
        "\x09\x09\x02\x02\x55\x41\x03\x55\x6E\x6F\x02\x55\x42\x03\x44\x6F\x73\x00\x00\x4B\x09\x02\x05\x54\x68\x69\x72\x64\x04\x46\x6F\x75"
        "\x72\xCA\x15\xCA\x06\x00\xCA\x07\x00\x00\xCA\x1C\x00\xCA\x1D\x00\xCA\x1F\xCA\x06\x00\xCA\x07\x00\x00\x00\xCB\x09\x0A\x02\x4B\x09"
        "\x02\x05\x54\x68\x69\x72\x64\x04\x46\x6F\x75\x72\xCA\x15\xCA\x06\x00\xCA\x07\x00\x00\xCA\x1C\x00\xCA\x1D\x00\xCA\x1F\xCA\x06\x00"
        "\xCA\x07\x00\x00\x00\x4B\x09\x02\x05\x46\x69\x72\x73\x74\x06\x53\x65\x63\x6F\x6E\x64\x8D\x09\x09\x02\x01\x41\x01\x30\x01\x42\x01"
        "\x31\xCB\x0C\x09\x02\x03\x4F\x6E\x65\x03\x54\x77\x6F\xCD\x0D\x09\x09\x02\x02\x45\x41\x02\x56\x41\x02\x45\x42\x02\x56\x42\xCD\x10"
        "\x09\x0B\x02\x02\x53\x41\x11\x01\xA6\x85\xB2\x85\x0B\x02\x53\x42\x11\x01\xA6\x89\xB2\x95\x0B\xCD\x12\x09\x09\x02\x02\x50\x41\x02"
        "\x56\x30\x02\x50\x42\x02\x56\x31\xCD\x13\x09\x09\x02\x02\x43\x41\x02\x56\x31\x02\x43\x42\x02\x56\x32\xCA\x15\xCA\x06\x00\xCA\x07"
        "\x00\xCD\x08\x09\x09\x02\x02\x44\x30\x04\x5A\x65\x72\x6F\x02\x44\x31\x03\x4F\x6E\x65\x00\xCB\x16\x0A\x02\xCA\x06\x00\xCA\x07\x00"
        "\xCD\x08\x09\x09\x02\x02\x44\x30\x04\x5A\x65\x72\x6F\x02\x44\x31\x03\x4F\x6E\x65\x00\xCA\x06\x00\xCA\x07\x00\xCD\x08\x09\x09\x02"
        "\x02\x44\x30\x04\x5A\x65\x72\x6F\x02\x44\x31\x03\x4F\x6E\x65\x00\xCD\x17\x09\x0A\x02\x02\x4E\x41\x29\x02\x31\x31\x00\x02\x4E\x42"
        "\x29\x02\x32\x32\x00\xCD\x19\x09\x11\x02\x04\x49\x36\x34\x41\x92\xD9\xA1\x93\x08\x04\x49\x36\x34\x42\x92\xD9\xA1\xA3\x08\xCD\x1A"
        "\x09\x08\x02\x02\x52\x41\x00\x00\x00\x00\x00\x00\xF0\x3F\x02\x52\x42\x00\x00\x00\x00\x00\x00\x00\x40\xCA\x1C\x00\xCA\x1D\x00\xCD"
        "\x1E\x09\x0A\x02\x02\x49\x41\x50\x06\x00\x02\x49\x42\x50\x08\x00\xCA\x1F\xCA\x06\x00\xCA\x07\x00\xCD\x08\x09\x09\x02\x02\x55\x41"
        "\x03\x55\x6E\x6F\x02\x55\x42\x03\x44\x6F\x73\x00\xCB\x20\x0A\x02\xCA\x06\x00\xCA\x07\x00\xCD\x08\x09\x09\x02\x02\x55\x41\x03\x55"
        "\x6E\x6F\x02\x55\x42\x03\x44\x6F\x73\x00\xCA\x06\x00\xCA\x07\x00\xCD\x08\x09\x09\x02\x02\x55\x41\x03\x55\x6E\x6F\x02\x55\x42\x03"
        "\x44\x6F\x73\x00\x00\x00\x8D\x09\x09\x02\x01\x32\x01\x43\x01\x33\x01\x44\xCB\x09\x0A\x01\xCA\x15\xCA\x06\x00\xCA\x07\x00\x00\xCA"
        "\x1C\x00\xCA\x1D\x00\xCA\x1F\xCA\x06\x00\xCA\x07\x00\xCD\x08\x09\x09\x02\x02\x55\x30\x01\x41\x02\x55\x31\x01\x42\x00\x00\x00\x00"
    ),

    BondSerializerTestParam(
        "Empty substructs",
        [](clienttelemetry::data::v3::ClientToCollectorRequest& r)
        {
            r.DataPackages.resize(1);
            r.DataPackages.back().Records.resize(1);
            r.DataPackages.back().Receipts.push_back(r.DataPackages.back().Records[0]);
        },
        "\x2B\x0A\x01\xCB\x08\x0A\x01\xCA\x15\xCA\x06\x00\xCA\x07\x00\x00\xCA\x1C\x00\xCA\x1D\x00\xCA\x1F\xCA\x06\x00\xCA\x07\x00\x00\x00"
        "\xCB\x09\x0A\x01\xCA\x15\xCA\x06\x00\xCA\x07\x00\x00\xCA\x1C\x00\xCA\x1D\x00\xCA\x1F\xCA\x06\x00\xCA\x07\x00\x00\x00\x00\x00"
    )
};
INSTANTIATE_TEST_CASE_P(BondSerialization_Basic, BondSerializerTests, testing::ValuesIn(basicTests));

//---

static BondSerializerTestParam const varintEncodingTests[] = {
    BondSerializerTestParam(
        "RequestRetryCount 1, otherwise empty",
        [](clienttelemetry::data::v3::ClientToCollectorRequest& r)
        {
            r.RequestRetryCount = 1;
        },
        "\x50\x02\x00"
    ),

    BondSerializerTestParam(
        "RequestRetryCount -1, otherwise empty",
        [](clienttelemetry::data::v3::ClientToCollectorRequest& r)
        {
            r.RequestRetryCount = -1;
        },
        "\x50\x01\x00"
    ),

    BondSerializerTestParam(
        "RequestRetryCount 63, otherwise empty",
        [](clienttelemetry::data::v3::ClientToCollectorRequest& r)
        {
            r.RequestRetryCount = 63;
        },
        "\x50\x7E\x00"
    ),

    BondSerializerTestParam(
        "RequestRetryCount 64, otherwise empty",
        [](clienttelemetry::data::v3::ClientToCollectorRequest& r)
        {
            r.RequestRetryCount = 64;
        },
        "\x50\x80\x01\x00"
    ),

    BondSerializerTestParam(
        "RequestRetryCount -64, otherwise empty",
        [](clienttelemetry::data::v3::ClientToCollectorRequest& r)
        {
            r.RequestRetryCount = -64;
        },
        "\x50\x7F\x00"
    ),

    BondSerializerTestParam(
        "RequestRetryCount -65, otherwise empty",
        [](clienttelemetry::data::v3::ClientToCollectorRequest& r)
        {
            r.RequestRetryCount = -65;
        },
        "\x50\x81\x01\x00"
    ),

    BondSerializerTestParam(
        "RequestRetryCount 127, otherwise empty",
        [](clienttelemetry::data::v3::ClientToCollectorRequest& r)
        {
            r.RequestRetryCount = 127;
        },
        "\x50\xFE\x01\x00"
    ),

    BondSerializerTestParam(
        "RequestRetryCount 128, otherwise empty",
        [](clienttelemetry::data::v3::ClientToCollectorRequest& r)
        {
            r.RequestRetryCount = 128;
        },
        "\x50\x80\x02\x00"
    ),

    BondSerializerTestParam(
        "RequestRetryCount -128, otherwise empty",
        [](clienttelemetry::data::v3::ClientToCollectorRequest& r)
        {
            r.RequestRetryCount = -128;
        },
        "\x50\xFF\x01\x00"
    ),

    BondSerializerTestParam(
        "RequestRetryCount -129, otherwise empty",
        [](clienttelemetry::data::v3::ClientToCollectorRequest& r)
        {
            r.RequestRetryCount = -129;
        },
        "\x50\x81\x02\x00"
    ),

    BondSerializerTestParam(
        "RequestRetryCount 8191, otherwise empty",
        [](clienttelemetry::data::v3::ClientToCollectorRequest& r)
        {
            r.RequestRetryCount = 8191;
        },
        "\x50\xFE\x7F\x00"
    ),

    BondSerializerTestParam(
        "RequestRetryCount 8192, otherwise empty",
        [](clienttelemetry::data::v3::ClientToCollectorRequest& r)
        {
            r.RequestRetryCount = 8192;
        },
        "\x50\x80\x80\x01\x00"
    ),

    BondSerializerTestParam(
        "RequestRetryCount -8192, otherwise empty",
        [](clienttelemetry::data::v3::ClientToCollectorRequest& r)
        {
            r.RequestRetryCount = -8192;
        },
        "\x50\xFF\x7F\x00"
    ),

    BondSerializerTestParam(
        "RequestRetryCount -8193, otherwise empty",
        [](clienttelemetry::data::v3::ClientToCollectorRequest& r)
        {
            r.RequestRetryCount = -8193;
        },
        "\x50\x81\x80\x01\x00"
    ),

    BondSerializerTestParam(
        "RequestRetryCount -2^31, otherwise empty",
        [](clienttelemetry::data::v3::ClientToCollectorRequest& r)
        {
            r.RequestRetryCount = INT32_MIN;
        },
        "\x50\xFF\xFF\xFF\xFF\x0F\x00"
    ),

    BondSerializerTestParam(
        "RequestRetryCount 2^31-1, otherwise empty",
        [](clienttelemetry::data::v3::ClientToCollectorRequest& r)
        {
            r.RequestRetryCount = INT32_MAX;
        },
        "\x50\xFE\xFF\xFF\xFF\x0F\x00"
    )
};
INSTANTIATE_TEST_CASE_P(BondSerialization_Varint, BondSerializerTests, testing::ValuesIn(varintEncodingTests));

// *INDENT-OFF*
