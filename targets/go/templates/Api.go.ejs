package <%- api.name.toLowerCase() %>

// This code was generated by a tool. Any changes may be overwritten

import (
    "encoding/json"

    playfab "github.com/dgkanatsios/playfabsdk-go/sdk"

    "github.com/mitchellh/mapstructure"
)

<% for(var i in api.calls) { var apiCall = api.calls[i];
%><%- generateApiSummary("    ", apiCall, "summary", "https://api.playfab.com/Documentation/" + api.name + "/method/" + apiCall.name)
%>func <%- apiCall.name %>(settings *playfab.Settings, postData *<%- apiCall.request %>Model, <%- getAuthInputParams(apiCall) %>) (*<%- apiCall.result %>Model, error) {
<%- getRequestActions("        ", apiCall) %>
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "<%- apiCall.url %>", <%- getCurlAuthParams(apiCall) %>)
    if err != nil {
        return nil, err
    }
    
    result := &<%- apiCall.result %>Model{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}
<%- getCustomApiSignatures(api, sourceDir, apiCall) %>
<% } %>

