using Newtonsoft.Json;
using PlayFab.Internal;
using PlayFab.<%- api.name %>Models;
using System;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;

namespace PlayFab
{
<% if(api.description) { %>
    /// <summary>
    /// <%- api.description %>
    /// </summary><% } %>
    public class PlayFab<%- api.name %>API
    {
        public PlayFabSettings Settings { get; private set; }

        public PlayFab<%- api.name %>API(PlayFabSettings settings)
        {
            Settings = settings;
        }

        public PlayFab<%- api.name %>API()
            : this(new PlayFabSettings())
        {
        }

        public PlayFab<%- api.name %>API(string titleId)
            : this(new PlayFabSettings(titleId))
        {
        }

<% if (hasServerOptions) {
%>        public PlayFab<%- api.name %>API(string titleId, string developerSecretKey)
            : this(new PlayFabSettings(titleId, developerSecretKey))
        {
        }
<% } %>

<% for(var i in api.calls) { var apiCall = api.calls[i]; %>
        <% if(apiCall.summary) {%>/// <summary>
        /// <%- getDescriptionClean(apiCall.summary) %>
        /// </summary><%- getReturnComment(apiCall, api) %><% } %>
        public async <%- getReturnType(apiCall, api) %> <%- apiCall.name %>Async(<% if(getCallRequestsData(apiCall, api)) { %><%- apiCall.request %> request<% } %>)
        {
            <%- getRequestActions(apiCall, api) %>
            object httpResult = await Settings.DoPost("<%- apiCall.name %>", <%- getUrlAccessor(apiCall) %> + "<%- apiCall.url %>", <% if(getCallRequestsData(apiCall, api)) { %>request<% } else {%>null<% } %>, <%- getAuthParams(apiCall) %>);

            <% if(getCallReturnsData(apiCall, api)) {%>string resultRawJson = (string)httpResult;

            var serializer = JsonSerializer.Create(Settings.JsonSettings);
            var resultData = serializer.Deserialize<PlayFabJsonSuccess<<%- apiCall.result %>>>(new JsonTextReader(new StringReader(resultRawJson)));

            <%- apiCall.result %> result = resultData.data;
            <%- getResultActions(apiCall, api) %>
            <%- getReturnAction(apiCall, api) %><% } else { %>
			<%- getResultActions(apiCall, api) %><% } %>
        }
        <% if(getCallRequestsData(apiCall, api)) { %>
        <% if(apiCall.summary) {%>/// <summary>
        /// <%- getDescriptionClean(apiCall.summary) %>
        /// </summary><%- getParamsCommentForCall(apiCall, api) %><%- getReturnComment(apiCall, api) %><% } %>
        public async <%- getReturnType(apiCall, api) %> <%- apiCall.name %>Async(<%- joinParamsForCall(api, apiCall, true, true, true) %>)
        {
            var request = new <%- apiCall.request %>(<%- joinParamsForCall(api, apiCall, false, true, false) %>);
            <% if(getCallReturnsData(apiCall, api)) { %>return <% } %>await <%- apiCall.name %>Async(request);
        }
<% } %><% } %><% if(authKey) {
%>        private string AuthKey = null;

        // Determine if the AuthKey is set, without actually making it public
        public bool IsClientLoggedIn()
        {
            return !string.IsNullOrEmpty(AuthKey);
        }

        private async Task MultiStepClientLogin(bool needsAttribution)
        {
            if (needsAttribution && !Settings.DisableAdvertising && !string.IsNullOrEmpty(Settings.AdvertisingIdType) && !string.IsNullOrEmpty(Settings.AdvertisingIdValue))
            {
                AttributeInstallRequest request = new AttributeInstallRequest();
                if (Settings.AdvertisingIdType == PlayFabDefaultSettings.AD_TYPE_IDFA)
                    request.Idfa = Settings.AdvertisingIdValue;
                else if (Settings.AdvertisingIdType == PlayFabDefaultSettings.AD_TYPE_ANDROID_ID)
                    request.Android_Id = Settings.AdvertisingIdValue;
                else
                    return;
                await AttributeInstallAsync(request);
            }
        }
<% } %><% if(isAdmin) {
%>
        /// <summary>
        /// Uploads the <paramref name="build"/> to the provided <paramref name="uploadUrl"/>
        /// received by a call to GetServerBuildUploadURL(...).
        /// </summary>
        public async Task UploadBuildAsync(string uploadUrl, Stream build)
        {
            await Settings.DoPut("UploadBuild", uploadUrl, "application/x-zip-compressed", build);
        }

<% } %>    }
}
