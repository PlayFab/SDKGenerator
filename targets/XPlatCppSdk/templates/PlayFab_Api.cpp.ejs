#include <stdafx.h>

<%- getApiDefine(api) %>

#include <playfab/PlayFab<%- api.name %>Api.h>
#include <playfab/PlayFabHttp.h>
#include <playfab/PlayFabSettings.h>
#include <playfab/PlayFabError.h>


#ifndef _WIN32
#include <jsoncpp/json/writer.h>
#endif
#ifdef _WIN32
#include <json/writer.h>
#endif

namespace PlayFab
{
    using namespace <%- api.name %>Models;

    size_t PlayFab<%- api.name %>API::Update()
    {
        return PlayFabHttp::Get().Update();
    }

    void PlayFab<%- api.name %>API::ForgetAllCredentials()
    {
        return PlayFabSettings::ForgetAllCredentials();
    }

    // PlayFab<%- api.name %> APIs
<% for (var callIdx = 0; callIdx < api.calls.length; callIdx++) { var apiCall = api.calls[callIdx]; %>
    void PlayFab<%- api.name %>API::<%- apiCall.name %>(
        <%- apiCall.request %>& request,
        ProcessApiCallback<<%- apiCall.result %>> callback,
        ErrorCallback errorCallback,
        void* customData
    )
    {
<%- getRequestActions("        ", apiCall) %>
        IPlayFabHttp& http = IPlayFabHttp::Get();
        const auto requestJson = request.ToJson();

        Json::FastWriter writer;
        std::string jsonAsString = writer.write(requestJson);

        std::unordered_map<std::string, std::string> headers;
        headers.emplace(<%- getAuthParams(apiCall) %>);

        CallRequestContainerBase crc = CallRequestContainerBase(
            "<%- apiCall.url %>",
            headers,
            jsonAsString,
            On<%- apiCall.name %>Result,
            SharedVoidPointer((callback == nullptr) ? nullptr : new ProcessApiCallback<<%- apiCall.result %>>(callback)),
            errorCallback,
            customData);

        http.MakePostRequest(crc);
    }

    void PlayFab<%- api.name %>API::On<%- apiCall.name %>Result(int httpCode, std::string result, void* customContext)
    {
        Json::Value root;
        Json::Reader reader;

        bool parsingSuccessful = reader.parse(result.c_str(), root);

        if(parsingSuccessful)
        {
            <%- apiCall.result %> outResult;

            outResult.FromJson(root);

            // TODO: consider the following: (do we need this errorWrapper request?)
            //outResult.Request = request.errorWrapper.Request;

            CallRequestContainerBase* crc = static_cast<CallRequestContainerBase*>(customContext);

            if(httpCode == 200 && crc->getAPICallback() != nullptr)
            {
                // TODO: cast the function correctly.
                // const auto callback = (*static_cast<ProcessApiCallback<<%- apiCall.result %>> *>(crc->getAPICallback()));
                // callback(outResult, crc->getCustomContext());
            }
            else // Process the error case
            {
                // TODO: how is this supposed to fail gracefully?
                // TODO: consider the objects we are using, does the base class need an errorWrapper?
                if (PlayFabSettings::globalErrorHandler != nullptr)
                {
                    PlayFabSettings::globalErrorHandler(request.errorWrapper, customData);
                }

                if (crc->getErrorCallback() != nullptr)
                {
                    //outResult->getErrorCallback()(request.errorWrapper, customData);
                }
            }
        }
        else
        {
            throw new std::invalid_argument("The returned result body was not in a valid Json format during On<%- apiCall.name %>Result.");
        }
    }

<% } %><% if (hasClientOptions) { %>
    // Private PlayFabClientAPI specific
    bool PlayFabClientAPI::IsClientLoggedIn()
    {
        return !PlayFabSettings::clientSessionTicket.empty();
    }

    void PlayFabClientAPI::MultiStepClientLogin(bool needsAttribution)
    {
        if (needsAttribution && !PlayFabSettings::disableAdvertising && PlayFabSettings::advertisingIdType.length() > 0 && PlayFabSettings::advertisingIdValue.length() > 0)
        {
            AttributeInstallRequest request;
            if (PlayFabSettings::advertisingIdType == PlayFabSettings::AD_TYPE_IDFA)
                request.Idfa = PlayFabSettings::advertisingIdValue;
            else if (PlayFabSettings::advertisingIdType == PlayFabSettings::AD_TYPE_ANDROID_ID)
                request.Adid = PlayFabSettings::advertisingIdValue;
            else
                return;
            AttributeInstall(request, nullptr, nullptr);
        }
    }
<% } %>}

#endif
